#!/bin/bash


dev= ssid= pass= ip_base=

ssid_list=(
	'Police Surveillance Van 2'
	'Series of Tubes'
	'404NetworkUnavailable'
	'PlzBringVodkaToApt131'
	'Pretty Fly for a Wi - Fi'
	'The Banana Stand'
	'I have wifi and you dont'
	'Use this one Mom'
	'No Free Wi-Fi for You'
	'SUPERthanksforasking'
	'Network not found'
	'Skynet Global Defense Network'
	'youcanthazwireless'
	'GET OFF MY LAN'
	'Hide your kids, Hide your Wi-Fi'
	'lookmanowires'
	'AllYourBandWidthRbelongToUS'
	'Hidden Network'
	'No Internet Access'
	'Bongo hotspot'
	'I read your email'
	'STOP_STEALING_MY_INTERNET'
	'Hacked AP'
	'Honeypot'
	'8 Hz WAN IP'
	'Untrusted Network'
	'Virus Detected! Do Not Join'
	'Thats what she SSID'
	'Me-Fi'
	'The Promised LAN'
	'Viruses Are Us'
	'NotTheDroidsYourLookingFor'
	'The LAN Before Time'
	'Access Denied'
	'Unavailable'
	'Connecting...'
	'Loading...'
	'Searching...'
	'Unicycle Bear'
	'Bathroom Cam #3'
	'Linksys Park'
	'Why not Zoidberg'
	'iNowPronounceYouHusband&Wifi'
	'The Temple Of The Great Jaguar'
	'Ermahgerd Wer Fer'
	'LANDownUnder'
	'LAN of teh Free'
	'( . )( . )'
	'Linsanity'
	'Password is Password'
	'Warezburg'
	'Data Collection Point #2761'
	'Virus.exe'
	'Log in here!'
	'SSID=OFF'
	'THE MATRIX'
	'GoAway'
	'Silence of the LANs'
	'GTFO'
	'Download.Meth.Virus2'
	'Internet'
	'H1N1'
	'FAIL'
)


run() {
	[[ -z "$pass" ]] && pass=$(
		passgen -w $(random 2 3) 2>/dev/null\
			|| tr -cd '[:alnum:]' </dev/urandom | head -c10 )
	[[ -z "$dev" ]] && dev=$(iw dev | gawk '$1=="Interface" {print $2; exit}')
	[[ -z "$ssid" ]] && ssid=${ssid_list[$(random 0 ${#ssid_list[@]})]}
	[[ -z "$ip_base" ]] && ip_base=10.67.35

	ip_gw="$ip_base".1
	ip_min="$ip_base".2 ip_max="$ip_base".254
	ip_mask=255.255.255.0 ip_cidr=24
	ip_net="${ip_base}.0/${ip_cidr}"

	echo '--------------------'
	echo "dev: $dev"
	echo "ssid: $ssid"
	echo "pass: $pass"
	echo "ip: $ip_min - $ip_max ($ip_mask), gw: $ip_gw"
	echo '--------------------'
	echo "iptables -t nat -I POSTROUTING -s ${ip_net} -j MASQUERADE"
	echo "iptables -I FORWARD -s ${ip_net} -i ${dev} -j ACCEPT"
	echo "iptables -I FORWARD -d ${ip_net} -o ${dev} -j ACCEPT"
	echo "iptables -I INPUT -s ${ip_net} -i ${dev} -m udp --dport bootps -j ACCEPT"
	echo '--------------------'

	exec > >(gawk '{print strftime("[%Y-%m-%dT%H:%M:%S]"), $0; fflush()}') 2>&1

	conf=$(mktemp -d /tmp/adhocapd.XXXXXX)
	trap "pkill -g 0; sleep 0.3; rm -rf '$conf'" EXIT
	set -e

	echo 'Starting...'

#################### udhcpd.conf
	udhcpd_conf="$conf"/udhcpd.conf
	udhcpd_pid="$conf"/udhcpd.pid
	udhcpd_leases="$conf"/udhcpd.leases
	cat >"$udhcpd_conf" <<EOF
start $ip_min
end $ip_max
option subnet $ip_mask
option dns 8.8.8.8
option router $ip_gw

interface $dev

pidfile $udhcpd_pid
lease_file $udhcpd_leases
max_leases 50
EOF
#################### udhcpd.conf

#################### hostapd.conf
	hostapd_conf="$conf"/hostapd.conf
	cat >"$hostapd_conf" <<EOF
# http://hostap.epitest.fi/gitweb/gitweb.cgi?p=hostap.git;a=blob_plain;f=hostapd/hostapd.conf

interface=$dev

driver=nl80211
hw_mode=g
channel=2

country_code=RU
ieee80211d=1

ssid=$ssid

macaddr_acl=0
ignore_broadcast_ssid=0

auth_algs=1
wpa=3
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
wpa_passphrase=$pass

logger_syslog=0
logger_syslog_level=4
logger_stdout=-1
logger_stdout_level=1
EOF
#################### hostapd.conf

	ip link set $dev up
	ip addr add "${ip_gw}/${ip_cidr}" dev $dev ||:
	hostapd "$hostapd_conf" &
	touch "$udhcpd_leases"
	busybox udhcpd -f "$udhcpd_conf" &
	wait
}


random() {
	local min="$1" max="$2"
	[[ -z "$max" ]] && { min=0; max=$min; }
	echo $(( ( $max - $min ) *  RANDOM  / 32767 + $min ))
}


while [[ -n "$1" ]]; do
	case "$1" in
		-h|--help) echo "Usage: $0 $(gawk\
				'/^\s+case\>/ {parse=1; next}
				/^\s+esac\>/ {exit}
				!parse {next}
				match($0, /^\s*([\-|a-z]+)\)/, a) {
					if (ac==0 || ac<2) ac=""; else ac=sprintf(" ...(%s)", ac-1)
					if (ap) printf("[ %s%s ] ", ap, ac)
					ap=a[1]; ac=0 }
				{for (i=1;i<NF;i++) if (match($i, /\<shift\>/)) ac++}' $0)"
			exit 0 ;;

		-x) shift; set -x ;;
		-d|--dev) shift; dev="$1"; shift ;;
		-s|--ssid) shift; ssid="$1"; shift ;;
		-p|--pass) shift; pass="$1"; shift ;;
		-a|--ip-base) shift; ip_base="$1"; shift ;;

		welp) exit 1 ;;
		*) echo "Unknown option: $1" && exit 1 ;;
	esac
done


run
exit 0
