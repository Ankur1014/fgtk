#!/usr/bin/env python

from optparse import OptionParser
parser = OptionParser(usage='%prog host',
	description='Connect to ssh channel with predefined settings')
parser.add_option('-r', '--root',
	action='store_true', dest='root',
	help='try to log in as root user, regardless of cfg')
parser.add_option('-p', '--persist',
	action='store_true', dest='persist',
	help='try re-connecting until success')
parser.add_option('-l', '--list-hosts',
	action='store_true', dest='list_hosts',
	help='do not connect anywhere, just list known hosts')
parser.add_option('-i', '--ip',
	action='store_true', dest='ip',
	help='connect to IP rather than the hostname')
parser.add_option('-n', '--poll-interval',
	action='store', dest='poll', type='int', default=1, metavar='SEC',
	help='secs to wait between polling to see if process was terminated by SIGINT')
parser.add_option('-w', '--wait',
	action='store', type='int', dest='wait', default=5, metavar='SEC',
	help='secs to wait for process to terminate on signal')
optz, argz = parser.parse_args()
if not argz and not optz.list_hosts: parser.error('No host specified')


from string import whitespace as spaces
from fgc import log
import re, os, sys

log.cfg()

hosts = dict([
	(host, (ip if optz.ip else None, suffix, None)) # host, (ip,suffix,port); ip isn't needed if connecting to host
	for ip,fqhn,suffix,host in
		re.findall('^([a-f\d.:]+).*?(\S\.(\w+))?\s+([^\s.]+)\s*$',
			open('/etc/hosts').read(), re.M)
])
for line in open(os.path.expanduser('~/.cFG/host_list')):
	line = line.strip(spaces)
	if not line or line.startswith('#'): continue
	alias,link = line.split(' ', 1)
	try: host,suffix = alias.rsplit('.', 1)
	except ValueError: host,suffix = alias,None
	try: link,port = link.split('/', 1)
	except ValueError: port = None
	hosts[host] = link,suffix,port

if optz.list_hosts:
	sys.stdout.write(' '.join(hosts.keys()))
	sys.exit()

auth = dict([
	tuple(line.strip(spaces).split(' ', 1))
	for line in open(os.path.expanduser('~/.cFG/host_auth')).readlines()
])

for host,(link,suffix,port) in hosts.iteritems():
	if not link: link = host
	try: hosts[host] = link, auth[suffix], port
	except KeyError: hosts[host] = link, None, port

try:
	host,auth,port = hosts[argz[0]]
	if optz.root: auth = 'root'
except KeyError:
	log.error('Unknown host specified')
	sys.exit(1)


from time import sleep
import signal
death_seq = 0 # Indicates that time to play it nice is over
def key_int(sigid, frame):
	global death_seq
	if death_seq: return proc.send_signal(signal.SIGKILL)
	else:
		optz.persist = False # Just in case
		proc.send_signal(signal.SIGINT)
		while death_seq < optz.wait and proc.poll() == None:
			sleep(optz.poll)
			death_seq += optz.poll
		proc.send_signal(signal.SIGTERM)
signal.signal(signal.SIGINT, key_int)


line = ['/usr/bin/ssh', '-Y', '%s@%s'%(auth,host) if auth else host] + (['-p', str(port)] if port else [])
if not optz.persist:
	sys.stdout.flush()
	os.execv(line[0], line)
else:
	from subprocess import Popen as exe
	while 1:
		proc = exe(line, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr)
		try: err = proc.wait()
		except OSError: break # Caught signal
		if not err: break
		sleep(optz.poll)
