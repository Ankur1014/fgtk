#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from __future__ import print_function
from plumbum import local, SshMachine
import os, sys, types, yaml, json


def force_bytes(bytes_or_unicode, encoding='utf-8', errors='backslashreplace'):
	if isinstance(bytes_or_unicode, bytes): return bytes_or_unicode
	return bytes_or_unicode.encode(encoding, errors)

def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Enqueue tracks in emacs emms player from "beet ls" (beets) output.')
	parser.add_argument('beet_ls_args', nargs='*',
		help='Filtering parameters to pass to "beet ls" command'
				' ("-f $path" will be auto-prepended to final commandline).'
			' If empty, just a list of paths will be read from stdin.')
	parser.add_argument('-r', '--remote',
		help='Remote host to run beets on instead of local one.'
			' Can be a yaml list or dict of parameters to pass to'
				' plumbum.SshMachine init (e.g. host, user, keyfile, etc - see plumbum docs).'
			' Assumes that paths that remote instance will provide will work here too.')
	parser.add_argument('-n', '--dry-run',
		action='store_true', help='Do not run emacsclient and enqueue paths to emms.')
	parser.add_argument('-v', '--verbose',
		action='store_true', help='Dump list of paths in question to stdout.')
	parser.add_argument('-d', '--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	import logging
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = logging.getLogger()

	cmd = local
	if opts.remote:
		remote = yaml.safe_load(opts.remote)
		if isinstance(remote, types.StringTypes): a, kw = [remote], {}
		elif isinstance(remote, list): a, kw = remote, {}
		elif isinstance(remote, dict): a, kw = [], remote
		cmd = SshMachine(*a, **kw)

	if opts.beet_ls_args:
		beet_ls_args = list(opts.beet_ls_args)
		beet_ls_args = ['-f', '$path'] + beet_ls_args
		paths = cmd['beet']('ls', *beet_ls_args)
	else:
		paths = sys.stdin.read()

	for path in map(force_bytes, filter(None, paths.splitlines())):
		if opts.verbose: print(path)
		if not os.path.exists(path):
			log.warn('Skipping non-existing path: %s', path)
			continue
		if not opts.dry_run:
			path_quoted = json.dumps(path)
			assert path_quoted[0] == path_quoted[-1] == '"', [path, path_quoted]
			local['emacsclient']('-e', '(emms-add-file {})'.format(path_quoted))


if __name__ == '__main__': sys.exit(main())
