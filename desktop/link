#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import unicode_literals, print_function

import itertools as it, operator as op, functools as ft
from os.path import exists, isfile, expanduser
from subprocess import Popen, PIPE
import re, os, sys, types


host_lists = map(expanduser, ['~/.cFG/host_list', '~/.cFG/host_list.roam'])
host_lists_ext = expanduser('~/.cFG/host_list.ext')
host_lists_auth = expanduser('~/.cFG/host_auth')


def build_host_lists(roam, use_ip):
	hosts = dict(
		# host, (ip,suffix,port); ip isn't needed if connecting to hostname
		(host, (ip if use_ip else None, suffix, None))
		for ip,fqhn,suffix,host in
			re.findall('^([a-f\d.:]+).*?(\S\.(\w+))?\s+([^\s.]+)\s*$',
				open('/etc/hosts').read(), re.M) )

	if isfile(host_lists_ext):
		for line in open(host_lists_ext):
			try:
				line = line.strip().split('\t')
				if not filter(None, line): continue
				src = expanduser(line[0])

				if src.endswith('.gpg'):
					log.debug('Using gpg to decrypt host_lists_ext file: %s'. line)
					if 'GPG_AGENT_INFO' not in os.environ: raise RuntimeError
					proc = Popen(['gpg', '--no-tty', '-qd'], stdin=open(src, 'rb'), stdout=PIPE)
					ext, src = proc.stdout.read(), src[:-4]
					if proc.wait(): raise RuntimeError('GPG subprocess failed')
				else: ext = open(src).read()

				while True:
					if src.endswith('.yaml'):
						import yaml
						ext, src = yaml.safe_load(ext), src[:-5]
					elif src.endswith('.json'):
						import json
						ext, src = json.loads(ext), src[:-5]
					elif src.endswith('.pickle'):
						import pickle
						ext, src = pickle.loads(ext), src[:-6]
					elif isinstance(ext, types.StringTypes):
						ext = map(op.methodcaller('strip'), ext.splitlines())
					else: break

				if len(line) > 2 and line[2]:
					for k in line[2].split('.'): ext = ext[k]
				ext_domain = line[1] if len(line) > 1 and line[1] else None
				if isinstance(ext, types.StringTypes): ext = [ext]
				for ext in ext: hosts[ext] = None, ext_domain, None
			except RuntimeError: pass # these are considered OK here

	for line in open(host_lists[int(bool(roam))]):
		line = line.strip()
		if not line or line.startswith('#'): continue
		alias, link = line.split(' ', 1)
		try: host, suffix = alias.rsplit('.', 1)
		except ValueError: host, suffix = alias, None
		try: link, port = link.split('/', 1)
		except ValueError: port = None
		hosts[host] = link, suffix, port

	return hosts


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Connect to remote host, whatever that means.')
	parser.add_argument('host', nargs='*', help='Host alias to connect to.')
	parser.add_argument('-r', '--root', action='store_true',
		help='Try to log in as root user, regardless of cfg.')
	parser.add_argument('-s', '--screen', action='store_true',
		help='Start or connect to a screen session on the otherside.')
	parser.add_argument('-p', '--persist', action='store_true',
		help='Try re-connecting until success.')
	parser.add_argument('-l', '--list-hosts', action='store_true',
		help='Do not connect anywhere, just list known hosts.')
	parser.add_argument('-i', '--ip', action='store_true',
		help='Connect to IP rather than the hostname.')
	parser.add_argument('-n', '--poll-interval',
		action='store', type=int, default=1, metavar='SEC',
		help='Seconds to wait between polling to see if'
			' process was terminated by SIGINT (default: %(default)s).')
	parser.add_argument('-w', '--wait',
		action='store', type=int, default=5, metavar='SEC',
		help='Seconds to wait for process to'
			' terminate on signal (default: %(default)s).')
	parser.add_argument('-a', '--forward-auth', action='store_true',
		help='Enable ssh authentication forwarding.')
	parser.add_argument('-x', '--disable-Xfwd',
		action='store_false', dest='forward_x', default=True,
		help='Disable X-forwarding.')
	parser.add_argument('-t', '--roam', action='store_true',
		help='Roaming mode (use real hostnames and IPs, not local ones).'
			' Should be auto-detected by default if host_list.roam exists.')
	parser.add_argument('--roam-detect', default='/dev/.net/fg_core', # created by wicd hook
		help='Enable roaming mode if this path (or any of paths, if multiple) does not exist.'
			' Multiple paths can be specified with ":" as separator.'
			' Empty string to disable. Default: %(default)s')
	parser.add_argument('--roam-detect-invert',
		action='store_true', help='Invert --roam-detect check result.')
	parser.add_argument('-v', '--visual', action='store_true',
		help='Enabled randomart key signature display.')
	parser.add_argument('-4', '--ipv4', action='store_true', help='Make ssh use IPv4 by default.')
	parser.add_argument('-m', '--tmux', action='store_true',
		help='Connect to all the specified hosts in different tmux windows.')
	parser.add_argument('--no-tmux', action='store_true')
	parser.add_argument('-d', '--debug', action='store_true', help='Verbose operation mode.')
	optz = parser.parse_args()

	global log
	import logging
	logging.basicConfig(level=logging.DEBUG if optz.debug else logging.WARNING)
	log = logging.getLogger()

	if not optz.host and not optz.list_hosts: parser.error('No host specified')
	if optz.no_tmux: optz.tmux = False # should only be used from --tmux
	if optz.host and not optz.tmux:
		try: optz.host, = optz.host
		except ValueError: parser.error('Only one host may be specified without --tmux.')

	## Tmux mode shortcut - just re-run "link" in new windows
	if optz.tmux:
		hosts = set(optz.host)
		argv = [sys.argv[0], '--no-tmux']
		for arg in sys.argv[1:]:
			if arg in hosts:
				hosts.remove(arg)
			else: argv.append(arg)
		assert not hosts
		for host in optz.host:
			log.debug('Creating tmux window for host: %s', host)
			Popen(['tmux', 'new-window']).wait()
			Popen(['tmux', 'send', 'exec {}\n'.format(' '.join(argv + [host]))]).wait()
		sys.exit(0)

	## --roam-detect thing
	if not optz.roam and exists(host_lists[1]):
		for p in optz.roam_detect.split(':'):
			p = p.strip()
			if not p: continue
			if exists(p):
				optz.roam = bool(optz.roam_detect_invert)
				log.debug('Using --roam-detect to override roam-mode to: %s', optz.roam)
				break
		else: log.debug('--roam-detect check did not return any decisive result')

	hosts = build_host_lists(roam=optz.roam, use_ip=optz.ip)

	## Usually for shell completion
	if optz.list_hosts:
		sys.stdout.write(' '.join(hosts.keys()))
		sys.exit()

	## Get the connection parameters
	auth = dict(line.strip().split(' ', 1) for line in open(host_lists_auth))

	for host, (link, suffix, port) in hosts.viewitems():
		if not link: link = host
		try: hosts[host] = link, auth[suffix], port
		except KeyError: hosts[host] = link, None, port

	try:
		host, auth, port = hosts[optz.host]
		if optz.root: auth = 'root'
	except KeyError:
		parser.error('Unknown host specified: {}\n'.format(optz.host))
		sys.exit(1)
	log.debug('Using host-auth-port: %s, %s, %s', host, auth, port)


	## Actual connection stuff

	from time import sleep
	import signal
	death_seq = 0 # indicates that time to play it nice is over
	def key_int(sigid, frame):
		global death_seq
		if death_seq: return proc.send_signal(signal.SIGKILL)
		else:
			optz.persist = False # just in case
			proc.send_signal(signal.SIGINT)
			while death_seq < optz.wait and proc.poll() == None:
				sleep(optz.poll_interval)
				death_seq += optz.poll_interval
			proc.send_signal(signal.SIGTERM)
	signal.signal(signal.SIGINT, key_int)

	line = ['ssh', '%s@%s'%(auth,host) if auth else host]
	if port: line.extend(['-p', str(port)])
	if optz.forward_x: line.append('-Y')
	if optz.forward_auth: line.append('-A')
	if optz.ipv4: line.append('-4')
	if optz.visual: line.append('-oVisualHostKey=yes')
	if optz.screen: line.extend(['-t', 'screen', '-DR'])

	log.debug('Connection command: %s', ' '.join(line))
	if not optz.persist:
		sys.stdout.flush()
		sys.stderr.flush()
		os.execvp(line[0], line)
	else:
		while True:
			proc = Popen(line)
			try: err = proc.wait()
			except OSError: break # caught signal
			if not err: break
			sleep(optz.poll_interval)


if __name__ == '__main__': sys.exit(main())
