#!/bin/bash

[[ -z "$1" || -e "$1" ]] && {
	[[ -e "$1" ]] && {
		echo >&2 "ERROR: destination file already exists: $1"
		echo >&2
	}

	echo >&2 "Usage: $0 <result> <twitch files to merge>"
	echo >&2 "Example: $0 someuser_broadcast.flv ~/DLz/someuser*.flv"
	echo >&2
	echo >&2 "Concatenates all stream parts specified"
	echo >&2 " as args without recoding using ffmpeg concat feature."
	echo >&2 "Order of args is important, as it'll correspond to order in resulting file."
	exit 1
}

log='-loglevel error'
dst=$1
shift


# Make sure all parts match expected video profile - i.e. have h264/aac streams
for p in "$@"; do
	ffprobe $log -show_entries 'stream=codec_name,codec_type' -of flat -i "$p" |
		awk 'BEGIN {n["h264"]=1; n["aac"]=1}
			match($0,/^streams\.stream\.[0-9]+\.codec_name="([^"]+)"/,a) {n[a[1]]=0}
			END {for (idx in n) if (n[idx]) {print "Not found:", idx; exit 1}}'\
		&& continue
	echo >&2 "Not found expected h264/aac or entries in: $p"
	exit 1
done


concat="" fifos=()
cleanup() {
	for fifo in "${fifos[@]}"; do rm -f "$fifo"; done
	kill 0
}
trap cleanup SIGINT SIGTERM EXIT


# Gather all fifos for "concat:fifo1|fifo2"
for p in "$@"; do
	fifo=$(mktemp fifo.XXXXXXX)
	rm "$fifo" && mkfifo -m600 "$fifo"
	ffmpeg $log -i "$p" -c copy -bsf:v h264_mp4toannexb -f mpegts -y "$fifo" </dev/null &
	[[ -n "$concat" ]] && concat+='|'
	concat+="$fifo"
	fifos+=( "$fifo" )
done

[[ -z "$fifos" ]] && {
	echo >&2 "Nothing to process?"
	exit 0
}


# Put it all together
ffmpeg $log -f mpegts -i "concat:$concat" -c copy -bsf:a aac_adtstoasc "$dst"

sleep 1 # let subpids die in peace
