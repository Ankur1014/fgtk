#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

from subprocess import Popen, PIPE, STDOUT
from datetime import datetime
import os, sys, logging, string, re, time, signal


# Since mpv-0.6.2, it doesn't seem to accept chars to stdin as control anymore
# This was used to send "mute" key to it ("m")
# Following code is the workaround to toggle mute for the stream of mpv pid instead

_bus_cache = None
def get_bus(srv_addr=None):
	global _bus_cache
	if not srv_addr and _bus_cache is not None: return _bus_cache
	import dbus
	if srv_addr is None:
		srv_addr = os.environ.get('PULSE_DBUS_SERVER')
		if not srv_addr\
				and os.access('/run/pulse/dbus-socket', os.R_OK | os.W_OK):
			# Well-known system-wide daemon socket
			srv_addr = 'unix:path=/run/pulse/dbus-socket'
		if not srv_addr:
			srv_addr = dbus.SessionBus().get_object(
				'org.PulseAudio1', '/org/pulseaudio/server_lookup1')\
				.Get('org.PulseAudio.ServerLookup1',
					'Address', dbus_interface='org.freedesktop.DBus.Properties')
	_bus_cache = dbus.connection.Connection(srv_addr)
	return _bus_cache

def dbus_bytes(dbus_arr, strip='\0' + string.whitespace):
	return bytes(bytearray(dbus_arr).strip(strip))

def pa_mute(pid, val, srv_addr=None):
	import dbus
	bus = get_bus(srv_addr=srv_addr)
	streams = bus.get_object(object_path='/org/pulseaudio/core1')\
		.Get( 'org.PulseAudio.Core1', 'PlaybackStreams',
			dbus_interface='org.freedesktop.DBus.Properties' )
	if not streams: return None
	for path in streams:
		stream = dbus.Interface(
			bus.get_object(object_path=path),
			dbus_interface='org.freedesktop.DBus.Properties' )
		props = stream.Get('org.PulseAudio.Core1.Stream', 'PropertyList')
		stream_pid = int(dbus_bytes(props['application.process.id']))
		if stream_pid == pid:
			stream.Set('org.PulseAudio.Core1.Stream', 'Mute', bool(val))
			break
	else:
		logging.getLogger('pactl').warn('Failed to find pa stream for pid: {}'.format(pid))


track_max_len = 16384
mute_prefix_default = 'muted: '

class MpvCtl(object):

	player_cmd_base = ['mpv', '--input-terminal', '--term-status-msg=']
	player = track_last = None
	muted = muted_auto = muted_change = False

	def __init__( self, dst_file=None,
			mute_re=None, mute_delay=None, mute_old=False, mute_prefix=None,
			recode=None, line_format=None, ts_format=None ):
		self.log = logging.getLogger('mpvctl')

		self.line_format = line_format or '{ts}{mute}{}\n'
		self.ts_format, self.recode = ts_format, recode
		self.mute_re, self.mute_delay = mute_re, mute_delay
		self.mute_old, self.mute_prefix = mute_old, mute_prefix
		if dst_file:
			self.dst = dst = open(dst_file, 'a+b')
			dst.seek(max(0, os.fstat(dst.fileno()).st_size - (track_max_len + 2)))
			last_line = dst.read()
			if '\n' in last_line:
				self.track_last = last_line.rstrip('\r\n').rsplit('\n', 1)[-1].strip()
		else:
			self.dst = sys.stdout

		self.install_mute_sig_handler()
		if mute_re: self.install_mute_sig_handler(signal.SIGALRM)

	def install_mute_sig_handler(self, sig=signal.SIGQUIT):
		signal.signal(sig, self.send_mute)

	def terminate(self):
		if not (self.player and self.player.poll() is None): return
		self.log.debug('Terminating running player instance')
		self.player.terminate()

	def send_mute(self, sig=None, frm=None):
		if not self.player: return
		if self.muted_change: return
		self.muted_change = True # racy lock
		self.muted = not self.muted
		auto = sig is True or sig == signal.SIGALRM
		if auto:
			if not self.muted_auto: return
		elif self.muted_auto: self.muted_auto = False # manual action
		if not self.muted: self.muted_auto = False
		self.log.debug( 'Toggling "mute" on a running player'
			' instance (sig: %s, auto: %s) to: %s', sig, auto, self.muted )
		if self.mute_old: self.player.stdin.write('m') # doesn't work with newer mpv
		else: pa_mute(self.player.pid, self.muted)
		self.muted_change = False
		return self.muted

	def _send_mute_auto(self):
		if not self.mute_delay or self.mute_delay < 0: self.send_mute(True)
		else: signal.alarm(self.mute_delay)

	def send_mute_auto(self, enable):
		if enable:
			if self.muted: return
			self.muted_auto = True
			self._send_mute_auto()
		else:
			if not self.muted_auto: return
			self._send_mute_auto()

	def track_match(self, line):
		line = line.strip()
		if not line.startswith('icy-title:'): return
		track = line[10:].strip()
		if self.track_last and self.track_last.endswith(track): return
		self.track_last = track
		return track

	def track_changed(self, track):
		mute_prefix = ''
		if self.mute_re:
			if self.mute_re.search(track):
				self.send_mute_auto(True)
				if self.mute_prefix: mute_prefix = self.mute_prefix
			elif self.muted_auto: self.send_mute_auto(False)
		if self.recode:
			track = track\
				.decode(self.recode, 'replace')\
				.encode('utf-8', 'backslashreplace')
		# "datetime" allows for more strftime options here than just "time"
		ts = datetime.now().strftime(self.ts_format) if self.ts_format else ''
		self.dst.write(self.line_format.format(track, ts=ts, mute=mute_prefix))
		self.dst.flush()

	def track_dump_loop(self, opts):
		player_cmd = self.player_cmd_base + list(opts.mpv_args)
		ts = time.time()
		while True:
			if self.player:
				player_poll = self.player.poll()
				if player_poll is not None:
					player_poll, self.player = self.player.wait(), None
					if player_poll != 0:
						self.log.error('mpv failed (exit code: %s), exiting', player_poll)
						return player_poll

			if not self.player:
				self.player = Popen( player_cmd,
					stdin=PIPE, stdout=PIPE, stderr=STDOUT, preexec_fn=os.setsid )

				line_last = None
				for line in iter(self.player.stdout.readline, ''):
					ls = line.rstrip()
					if opts.passthrough and ls != line_last: self.log.debug(ls)
					line_last = ls
					track = self.track_match(line)
					if not track: continue
					self.track_changed(track)


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Record whatever is playing in mpv (as supplied by icy-* tags) to some file.'
			' Sending SIGQUIT (Ctrl+\ from terminal) toggles mute for the playback'
				' (actually writes "m" char to mpv stdin, which is bound to "mute" by default).')
	parser.add_argument('mpv_args', nargs='+',
		help='Options/arguments (including playback source) to pass to mpv.'
			' Some terminal-io options will be prepended to these as well.'
			' Use "--" to make sure its options wont get processed by this wrapper script.')

	parser.add_argument('-m', '--mute-regexp', metavar='regexp',
		help='Toggle mute than track name matches'
			' that regexp, unmuting than name changes again.')
	parser.add_argument('--mute-delay', type=float, metavar='seconds', default=1,
		help='When auto-toggling mute, delay by this many seconds'
			' (useful for long track crossfades, default: %(default)s).')
	parser.add_argument('--mute-old', action='store_true',
		help='Use "old" way of toggling mute by writing "m" to mpv stdin.'
			' Doesnt seem to work for newer mpv versions'
				' (probably due to it being too clever),'
				' so corresponding pulseaudio stream is muted via dbus instead.')
	parser.add_argument('--mute-title-prefix',
		nargs='?', default=False, metavar='prefix',
		help=(
				'Add prefix (can be specified as optional arg,'
					' default: {}) to track titles that match --mute-regexp.'
				' If --line-format is used, passed to it as "mute" keyword.')\
			.format(mute_prefix_default))

	parser.add_argument('-d', '--dst-file',
		help='Path to a file to record all the stuff to. If omitted, stdout will be used.')
	parser.add_argument('-f', '--line-format',
		help='Format for each output line. Line itself is passed as the first arg.')
	parser.add_argument('-t', '--timestamp', action='store_true',
		help='Prepend timestamps to each track entry in the output.'
			' If --line-format is used, passed to it as "ts" keyword.')
	parser.add_argument('--timestamp-format',
		metavar='py_ts_format', default='[%Y-%m-%d %H:%M] ',
		help='Format for timestamp-prefix to be prepended to each line (default: %(default)s).'
			' Should be compatible with pythons strftime() functions.')

	parser.add_argument('-e', '--recode-from', metavar='encoding',
		help='Decode titles from specified encoding and encode to utf-8.')

	parser.add_argument('--passthrough',
		action='store_true', help='Pass all mpv stdout lines to debug logging.')
	parser.add_argument('--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)

	mute_re = None
	if opts.mute_regexp:
		mute_re = opts.mute_regexp
		if mute_re.endswith('$\n'): mute_re = mute_re.rstrip() # common yaml quirk
		mute_re = re.compile(mute_re)
	mute_title_prefix = opts.mute_title_prefix or None
	if opts.mute_title_prefix is None:
		opts.mute_title_prefix = mute_prefix_default

	mpvctl = MpvCtl(
		dst_file=opts.dst_file, recode=opts.recode_from,
		line_format=opts.line_format,
		mute_delay=opts.mute_delay, mute_re=mute_re,
		mute_old=opts.mute_old, mute_prefix=opts.mute_title_prefix,
		ts_format=opts.timestamp and opts.timestamp_format )
	try: return mpvctl.track_dump_loop(opts)
	finally: mpvctl.terminate()

if __name__ == '__main__': sys.exit(main())
