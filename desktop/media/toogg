#!/usr/bin/env python3

import itertools as it, operator as op, functools as ft
from collections import OrderedDict, namedtuple
from asyncio import subprocess
import os, sys, re, logging, contextlib, asyncio, signal, json, tempfile


class LogMessage:
	def __init__(self, fmt, a, k): self.fmt, self.a, self.k = fmt, a, k
	def __str__(self): return self.fmt.format(*self.a, **self.k) if self.a or self.k else self.fmt

class LogStyleAdapter(logging.LoggerAdapter):
	def __init__(self, logger, extra=None):
		super(LogStyleAdapter, self).__init__(logger, extra or {})
	def log(self, level, msg, *args, **kws):
		if not self.isEnabledFor(level): return
		log_kws = {} if 'exc_info' not in kws else dict(exc_info=kws.pop('exc_info'))
		msg, kws = self.process(msg, kws)
		self.logger._log(level, LogMessage(msg, args, kws), (), log_kws)

get_logger = lambda name: LogStyleAdapter(logging.getLogger(name))


class FFProc:

	proc = finished = None

	def __init__(self, loop, src, cmd, stream_len=None, progress=True, prefix=None, **kws):
		self.loop, self.src, self.cmd, self.kws = loop, src, cmd, kws
		self.progress, self.stream_len = progress, stream_len
		self.prefix = ' '.join(filter(None, ['[{!r}]'.format(src), prefix])) + ': '
		self.cmd_repr = ' '.join((v if len(v.split()) == 1 else repr(v)) for v in cmd)

	async def __aenter__(self):
		await self.run(wait=False)
		return self

	async def __aexit__(self, *err):
		if self.finished and not self.finished.done():
			self.finished.cancel()
			with contextlib.suppress(asyncio.CancelledError): await self.finished

	async def run(self, wait=True):
		assert not self.proc
		log.debug('[{!r}] running: {}', self.src, self.cmd_repr)
		if self.progress: self.kws['stdout'] = subprocess.PIPE
		self.proc = await asyncio.create_subprocess_exec(*self.cmd, **self.kws)
		for k in 'stdin', 'stdout', 'stderr': setattr(self, k, getattr(self.proc, k))
		self.finished = self.loop.create_task(self.wait())
		if wait: await self.finished
		return self

	async def wait(self):
		progress_task = None
		if self.progress and self.proc.stdout:
			progress_task = self.loop.create_task(self.print_progress())
		try:
			await self.proc.wait()
			if progress_task: await progress_task
			if self.proc.returncode != 0:
				cmd_repr = '' if not self.cmd_repr else ': {}'.format(self.cmd_repr)
				raise AudioConverterError(( 'Command for src {!r} exited with'
					' non-zero status ({}){}' ).format(self.src, self.proc.returncode, cmd_repr))
		finally:
			if progress_task and not progress_task.done():
				progress_task.cancel()
				with contextlib.suppress(asyncio.CancelledError): await progress_task

	async def print_progress(self):
		report, pos_str = dict(), lambda n:\
			'{:02d}:{:02d}:{:02d}'.format(*map(int, [n//3600, n//60, n%60]))
		p = lambda tpl,*a,**k: print('\r{}'.format(self.prefix) + (
			tpl.format(*a,**k) if a or k else tpl ), end='', flush=True)
		try:
			while True:
				line = (await self.proc.stdout.readline()).decode()
				if not line: return
				k, v = line.split('=', 1)
				report[k] = v
				if k == 'progress':
					pos = int(report.get('out_time_ms', 0)) / 1000000
					if pos: # XXX: handle multiple files somehow
						if not self.stream_len: p(pos_str(pos))
						else:
							p( '{:.1f}% - {} / {}',
								(pos / self.stream_len) * 100, pos_str(pos), pos_str(self.stream_len) )
		finally: print()


class AudioConvError(Exception): pass

class AudioConvJob:
	__slots__ = 'name src dst tmp_file ffmpeg'.split()
	def __init__(self, *args, **kws):
		for k,v in it.chain(zip(self.__slots__, args), kws.items()): setattr(self, k, v)

class AudioConv:

	@classmethod
	async def run_async(cls, *args, **kws):
		async with cls(*args, **kws) as self: return await self.run()

	def __init__(self, loop, src_list, loudnorm=False, loudnorm_opts=None, max_parallel=None):
		self.loop, self.src_list, self.max_parallel = loop, src_list, max_parallel or os.cpu_count()
		self.loudnorm, self.loudnorm_opts = loudnorm, loudnorm_opts or ''

	async def __aenter__(self):
		self.conv_jobs = OrderedDict()
		self.success, self.src_done, self.exit_sig = False, OrderedDict(), None
		return self

	async def __aexit__(self, *err):
		if self.conv_jobs:
			await self.conv_cleanup()

	async def run(self):
		self.conv = self.loop.create_task(self.conv_list())
		def sig_handler(sig):
			self.exit_sig = sig
			self.conv.cancel()
		for sig in 'int', 'term':
			self.loop.add_signal_handler(
				getattr(signal, 'SIG{}'.format(sig.upper())), ft.partial(sig_handler, sig) )
		with contextlib.suppress(asyncio.CancelledError): await self.conv
		return self.success


	async def conv_cleanup(self, *src, raise_errors=False):
		if not src: src = list(self.conv_jobs.keys())
		for src in src:
			conv = self.conv_jobs.pop(src)
			conv.cancel()
			try: await conv
			except asyncio.CancelledError: pass
			except Exception as err:
				log.exception('conv-job crashed during cleanup: [{}] {}', err.__class__.__name__, err)
				if raise_errors: raise

	async def conv_list(self):
		src_iter = iter(self.src_list)
		while True:
			while src_iter and len(self.conv_jobs) < self.max_parallel:
				try: src = next(src_iter)
				except StopIteration:
					src_iter = None
					break
				log.debug('Scheduling new conv-job for src: {!r}', src)
				conv = self.conv_jobs[src] = self.loop.create_task(self.conv_src(src))
				conv.src = src
			if not self.conv_jobs: break

			done, pending = await asyncio.wait(
				self.conv_jobs.values(), return_when=asyncio.FIRST_COMPLETED )
			for res in done:
				dst_path = await res
				log.debug('conv-job done (dst file: {!r}) for src: {!r}', dst_path, src)
				await self.conv_cleanup(res.src, raise_errors=True)
				self.src_done[res.src] = dst_path

		assert len(self.src_done) == len(self.src_list)
		self.success = True


	async def conv_src(self, src):
		src_base = os.path.basename(src)
		dst = src_base.rsplit('.', 1)[0] + '.ogg'
		paths = {dst}

		def tmp_file(ext):
			p = '{}.{}'.format(dst, ext)
			paths.add(p)
			return p

		job = AudioConvJob(src_base, src, dst, tmp_file)

		async with FFProc( self.loop, job.name,
				['ffprobe', '-v', 'error', '-show_streams', '-print_format', 'json', job.src],
				progress=False, stdout=subprocess.PIPE ) as proc:
			src_info = (await proc.stdout.read()).decode()
			await proc.finished
			src_duration = None
			try:
				src_info = json.loads(src_info)
				for stream in src_info['streams']:
					if stream.get('codec_type') != 'audio': continue
					src_duration = float(stream['duration'])
					break
			except Exception as err:
				log.error('[{!r}] ffprobe failed, progress info wont be available: {}', job.name, err)
			log.debug('[{!r}] Detected audio stream duration: {}', job.name, src_duration)

		ffmpeg_cmd = ['ffmpeg', '-v', 'error', '-hide_banner', '-y', '-progress', 'pipe:1']
		job.ffmpeg = lambda pre, cmd_ext, **kws: FFProc(
			self.loop, src_base, ffmpeg_cmd + cmd_ext, stream_len=src_duration, prefix=pre, **kws )

		func = self.conv_src_simple if not self.loudnorm else self.conv_src_loudnorm
		try:
			await func(job)
			paths.remove(dst)
		finally:
			for p in paths:
				with contextlib.suppress(OSError): os.unlink(p)
		return dst


	async def conv_src_simple(self, job):
		await job.ffmpeg('to-ogg', ['-i', job.src, '-vn', '-f', 'ogg', job.dst]).run()

	async def conv_src_loudnorm(self, job):
		await job.ffmpeg('to-wav [1/3]', ['-i', job.src, '-f', 'wav', job.tmp_file('src.wav')]).run()

		ffmpeg_env = os.environ.copy()
		ffmpeg_env['NO_COLOR'] = '1'
		opts = self.loudnorm_opts.strip(':')
		if opts: opts += ':'

		async with job.ffmpeg( 'loudnorm-info [2/3]',
				[ '-v', 'info', '-i', job.tmp_file('src.wav'),
					'-af', 'loudnorm={}print_format=json'.format(opts), '-f', 'null', '/dev/null' ],
				env=ffmpeg_env, stderr=subprocess.PIPE ) as proc:
			norm_info, ffmpeg_stderr = list(), list()
			while True:
				line = await proc.stderr.readline()
				ffmpeg_stderr.append(line.decode().rstrip())
				if not line: break
				line = line.decode().strip()
				if norm_info:
					norm_info.append(line)
					if line == '}': break
				if re.search(r'^\[Parsed_loudnorm_0 @ 0x[0-f]+\]$', line): norm_info.append('')
			norm_info = ''.join(norm_info)
			try: await proc.finished
			except:
				log.error(
					'ffmpeg stderr:\n--------------------\n{}\n--------------------',
					'\n'.join(ffmpeg_stderr).rstrip() )
				raise
			log.debug('[{!r}] detected audio normalization info: {!r}', job.name, norm_info)
			if not norm_info:
				raise AudioConvError( 'ffmpeg failed to produce'
					' normalization info json (source file: {!r})'.format(job.name) )
			norm_info = json.loads(norm_info)

		opts_ext = (
				'measured_I={}:measured_TP={}:'
				'measured_LRA={}:measured_thresh={}:offset={}'
			).format(*op.itemgetter(
				'input_i', 'input_tp', 'input_lra', 'input_thresh', 'target_offset' )(norm_info))
		await job.ffmpeg( 'to-ogg [3/3]', [ '-i', job.tmp_file('src.wav'), '-af',
				'loudnorm={}{}'.format(opts, opts_ext), '-ar', '48k', '-f', 'ogg', job.dst ]).run()


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Convert source file(s) to audio, normalize it and encode to ogg/vorbis.'
			' Optionally uses ffmpeg "loudnorm" filter: https://ffmpeg.org/ffmpeg-all.html#loudnorm')
	parser.add_argument('src', nargs='+', help='File(s) to convert.')
	parser.add_argument('-x', '--remove-src', action='store_true',
		help='Remove source file(s) on success of the whole operation.')
	parser.add_argument('-t', '--dst-dir', metavar='path',
		help='Path to store resulting files in. Defaults to current one.')
	parser.add_argument('-l', '--loudnorm', action='store_true',
		help='Use ffmpeg "loudnorm" filter to have sane volume level.'
			' It takes quite a while to process longer files with it.'
			' Should not be available in pre-3.1 (2016-06-27) ffmpeg builds.'
			' ffmpeg docs link: https://ffmpeg.org/ffmpeg-all.html#loudnorm')
	parser.add_argument('-o', '--loudnorm-opts', metavar='ffmpeg-af-opts',
		help='String of options to pass to loudnorm filter,'
				' same as they would appear on ffmpeg command line.'
			' Example: I=-16:TP=-1.5:LRA=11')
	parser.add_argument('-d', '--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	src_list = list(map(os.path.realpath, opts.src))
	if opts.dst_dir: os.chdir(opts.dst_dir)

	global log
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = get_logger('main')

	with contextlib.closing(asyncio.get_event_loop()) as loop:
		success = loop.run_until_complete(
			AudioConv.run_async( loop, src_list,
				loudnorm=opts.loudnorm, loudnorm_opts=opts.loudnorm_opts ) )
	if success and opts.remove_src:
		for src in src_list: os.unlink(src)

	return int(not success)

if __name__ == '__main__': sys.exit(main())
