#!/usr/bin/env python

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('path', help='Path to watch for magnet links.')
parser.add_argument('--debug',
	action='store_true', help='Verbose operation mode.')
optz = parser.parse_args()


import itertools as it, operator as op, functools as ft
import os, sys, logging

from twisted.internet import inotify, reactor, protocol, defer
from twisted.python import filepath
from twisted.python import log


logging.basicConfig(level=logging.DEBUG
	if optz.debug else logging.WARNING)
log.PythonLoggingObserver().start()

for lvl in 'debug', 'info', 'warn', 'error', 'fatal':
	assert not getattr(log, lvl, False)
	setattr(log, lvl, ft.partial( log.msg,
		logLevel=getattr(logging, lvl.upper()) ))


class BufferedExec(protocol.ProcessProtocol):

	def __init__(self, stdin=None): self._stdin = stdin

	def connectionMade(self):
		self._stdout, self._stderr = list(), list()
		if self._stdin is not None: self.transport.write(self._stdin)
		self.transport.closeStdin()

	def outReceived(self, data): self._stdout.append(data)
	def errReceived(self, data): self._stderr.append(data)

	@property
	def buffers(self): return map(''.join, [self._stdout, self._stderr])

	def processEnded(self, stats):
		log.debug('Process has exited: {}'.format(self.transport))
		if stats.value.exitCode:
			log.error( 'Subprocess exited with'
				' non-zero exit code ({})'.format(stats.value.exitCode) )


class TransmissionRemoteCLI(BufferedExec):

	class RelayError(Exception): pass

	cmd = ['transmission-remote-cli', '--', '-a']

	@classmethod
	def relay(cls, link):
		cmdline = cls.cmd + [link]
		log.debug('Spawning relay-process: {}'.format(cmdline))
		proc = reactor.spawnProcess(
			cls(link=link, cmdline=cmdline), cmdline[0], cmdline,
			env=dict(PATH=os.environ['PATH'], HOME=os.environ['HOME']) )
		proc.sentinel = defer.Deferred()
		return proc.sentinel

	def __init__(self, link=None, cmdline=None, **kwz):
		self.link, self.cmdline = link, cmdline # only used for debug
		BufferedExec.__init__(self, **kwz)

	def processEnded(self, stats):
		log.debug(
			'Relay-process has finished (code: {}, link: {}): {}'\
				.format(stats.value.exitCode, self.link, self.cmdline) )

		fail, (out, err) = stats.value.exitCode, self.buffers
		if not fail:
			if err: fail = True
			else:
				lines = it.imap(bytes.strip, out.splitlines())
				for line in lines:
					if line == 'RESPONSE:':
						for line in lines:
							if not line.endswith('response: "success"'):
								fail = True
								break
						break

		result = self.transport.sentinel
		if fail:
			result.errback(self.RelayError())
			log.error('Failed to relay magnet link to transmission: {}'.format(self.link))
			# I'd rather avoid using full-fledged smtp to send out local notices
			log.debug('Trying to send out error mail')
			reactor.spawnProcess(
				BufferedExec(stdin='\n'.join([
					'Failed to relay magnet link via "{}" command'.format(self.cmdline[0]),
					'',
					'Link: {}'.format(self.link),
					'Command: {}'.format(self.cmdline),
					'Exit code: {}'.format(stats.value.exitCode),
					'Stdout:\n  {}'.format('\n  '.join(out.splitlines())),
					'Stderr:\n  {}'.format('\n  '.join(err.splitlines())) ])),
				'mail', [ 'mail',
					'-s', 'Failed to relay magnet link to transmission',
					'-a', 'X-Subsystem-Report: magnet_relay_transmission',
					'operator' ] )
		else: result.callback(None)


@defer.inlineCallbacks
def handle_dropped_file(_, path, mask):
	if path.splitext()[1] != '.magnet':
		log.debug('Ignoring event for non-magnet path: {}'.format(path))
		defer.returnValue(None)
	log.debug('Processing event: {}, {}'.format(
		path, inotify.humanReadableMask(mask) ))
	with path.open() as link_src:
		link = link_src.read().strip()
		if not link:
			log.info('Empty file detected (path: {!r}), ignoring it'.format(path.path))
		else:
			yield TransmissionRemoteCLI.relay(link)
			os.rename(link_src.name, '{}.added'.format(link_src.name))
			log.debug('Finished processing path: {}'.format(link_src.name))

notifier = inotify.INotify()
notifier.startReading()
notifier.watch( filepath.FilePath(optz.path),
	mask=inotify.IN_CLOSE_WRITE | inotify.IN_MOVED_TO,
	callbacks=[handle_dropped_file] )


log.debug('Entering inotify event loop')
reactor.run()
