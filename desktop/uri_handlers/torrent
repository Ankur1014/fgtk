#!/usr/bin/env python2


### For bencode bits below
# Derived from a thing under BitTorrent Open Source License, written by Petru Paler

# Different from vanilla bencode in:
#  * Handling "leading zeroes" in keys (doesn't error - for cjdns compat)
#  * encode_none method (to "n")
#  * encode_string encodes unicode as utf-8 bytes

def _ns_class(cls_name, cls_parents, cls_attrs):
	for k, v in cls_attrs.viewitems():
		if isinstance(v, types.FunctionType):
			cls_attrs[k] = classmethod(v)
	return type(cls_name, cls_parents, cls_attrs)

class BTEError(Exception): pass

class Bencached(object):
	__slots__ = 'bencoded',
	def __init__(self, s): self.bencoded = s

class BTE(object):
	__metaclass__ = _ns_class

	unicode_enc = 'utf-8'
	enable_none = False
	enable_bool = True
	cjdns_compat = False

	def decode_int(cls, x, f):
		f += 1
		newf = x.index('e', f)
		n = int(x[f:newf])
		if x[f] == '-':
			if x[f + 1] == '0': raise ValueError
		elif x[f] == '0' and newf != f+1: raise ValueError
		return n, newf+1
	def decode_string(cls, x, f):
		colon = x.index(':', f)
		n = int(x[f:colon])
		if not cls.cjdns_compat\
			and x[f] == '0' and colon != f+1: raise ValueError
		colon += 1
		return (x[colon:colon+n], colon+n)
	def decode_list(cls, x, f):
		r, f = [], f+1
		while x[f] != 'e':
			v, f = cls.decode_func[x[f]](cls, x, f)
			r.append(v)
		return r, f + 1
	def decode_dict(cls, x, f):
		r, f = {}, f+1
		while x[f] != 'e':
			k, f = cls.decode_string(x, f)
			r[k], f = cls.decode_func[x[f]](cls, x, f)
		return r, f + 1
	def decode_none(cls, x, f):
		if not cls.enable_none: raise ValueError(x[f])
		return None, f+1
	decode_func = dict(l=decode_list, d=decode_dict, i=decode_int, n=decode_none)
	for n in xrange(10): decode_func[bytes(n)] = decode_string

	def encode_bencached(cls, x, r): r.append(x.bencoded)
	def encode_int(cls, x, r): r.extend(('i', str(x), 'e'))
	def encode_float(cls, x, r): r.extend(('f', struct.pack('!d', x), 'e'))
	def encode_bool(cls, x, r):
		if not cls.enable_bool: raise ValueError(x)
		if x: cls.encode_int(1, r)
		else: cls.encode_int(0, r)
	def encode_string(cls, x, r):
		if isinstance(x, unicode):
			if not cls.unicode_enc: raise ValueError(x)
			x = x.encode(cls.unicode_enc)
		r.extend((str(len(x)), ':', x))
	def encode_list(cls, x, r):
		r.append('l')
		for i in x: cls.encode_func[type(i)](cls, i, r)
		r.append('e')
	def encode_dict(cls, x, r):
		r.append('d')
		ilist = x.items()
		ilist.sort()
		for k, v in ilist:
			r.extend((str(len(k)), ':', k))
			cls.encode_func[type(v)](cls, v, r)
		r.append('e')
	def encode_none(cls, x, r):
		if not cls.enable_none: raise ValueError(x)
		r.append('n')
	encode_func = {
		Bencached: encode_bencached,
		unicode: encode_string,
		str: encode_string,
		types.IntType: encode_int,
		types.LongType: encode_int,
		types.FloatType: encode_float,
		types.ListType: encode_list,
		types.TupleType: encode_list,
		types.DictType: encode_dict,
		types.BooleanType: encode_bool,
		types.NoneType: encode_none,
	}

	def bdecode(cls, x):
		try: r, l = cls.decode_func[x[0]](cls, x, 0)
		except (IndexError, KeyError, ValueError) as err:
			raise BTEError('Not a valid bencoded string: {}'.format(err))
		if l != len(x):
			raise BTEError('Invalid bencoded value (data after valid prefix)')
		return r

	def bencode(cls, x):
		r = []
		cls.encode_func[type(x)](cls, x, r)
		return ''.join(r)


_notify_init = False
def try_notification(title, body, critical=False, timeout=None):
	global _notify_init
	try:
		from gi.repository import Notify
		if not _notify_init:
			Notify.init('leech_torrent')
			_notify_init = True
		note = Notify.Notification()
		note.set_properties(summary=title, body=body)
		if critical: note.set_urgency(Notify.Urgency.CRITICAL)
		if timeout is not None: note.set_timeout(timeout)
		note.show()
	except: pass


def main():

	import itertools as it, operator as op, functools as ft
	from socket import gethostbyname, gaierror, setdefaulttimeout
	from urlparse import urlparse
	import os, sys

	# CLI
	import argparse
	parser = argparse.ArgumentParser(
		description='Download and process torrent link-file.' )
	parser.add_argument('path_or_url',
		nargs='?', help='Path or url of a file to process.')
	parser.add_argument('-r', '--referer', nargs='?',
		help='Referer header to use when downloading from web urls.')
	parser.add_argument('-c', '--cookie', nargs='?', help='HTTP cookie header to pass on.')
	parser.add_argument('-d', '--destination', help='Where to store the resulting file.')
	optz = parser.parse_args()

	# Long hangs are unacceptable here
	setdefaulttimeout(10)

	# Get source
	if not optz.path_or_url: torrent = sys.stdin.read()
	else:
		import urllib2
		source = urllib2.Request(optz.path_or_url)
		if optz.referer: source.add_header('Referer', optz.referer)
		if optz.cookie: source.add_header('Cookie', optz.cookie)
		torrent = urllib2.urlopen(source).read()

	# URL checker
	global trak_bad, trak_nx, count
	def trak_check(trak):
		global trak_bad, trak_nx, count
		count += 1
		if not trak: return False
		try: ip = gethostbyname(urlparse(trak).netloc.split(':', 1)[0])
		except gaierror:
			trak_nx.append(trak)
			return True # prehaps it will resolve later on
		else:
			if ip in ('127.0.0.1', '0.0.0.0'):
				trak_bad.append(trak)
				return False
			else: return True

	def chain_lists(src):
		if isinstance(src, StringTypes): yield src
		else:
			for atom in it.chain.from_iterable(
				it.imap(chain_lists, src) ): yield atom

	# Actual processing
	try: torrent_dec = BTE.bdecode(torrent)
	except Exception as err:
		from hashlib import md5
		from base64 import urlsafe_b64encode
		sample_path = urlsafe_b64encode(md5(torrent).digest())[:8]
		sample_path = '/tmp/bencode_fail.{}.torrent'.format(sample_path)
		with open(sample_path, 'wb') as dst: dst.write(torrent)
		raise ValueError('Failed to decode torrent (see {!r}): {}'.format(sample_path, err))
	torrent_dec.pop('libtorrent_resume', None) # see http://libtorrent.rakshasa.no/ticket/2202
	if 'announce-list' in torrent:
		torrent_dec['announce-list'] = [filter( trak_check,
			chain_lists(torrent_dec['announce-list']) )]
		# print >>sys.stderr, 'Result:', torrent['announce-list']
		if not trak_check(torrent_dec['announce']):
			try: torrent_dec['announce'] = torrent_dec['announce-list'][0][0]
			except IndexError as err:
				try_notification( 'No working trackers for torrent',
					'Filtered out ({0}): {1}'.format(len(trak_bad), '\n  ' + '\n  '.join(trak_bad)) )
				sys.exit()
	torrent = BTE.bencode(torrent_dec)

	# Output
	if not optz.destination or not optz.path_or_url: dest = sys.stdout
	else:
		from os.path import basename, join, exists, realpath
		from string import letters, digits
		from urllib import unquote_plus
		name = set(letters + digits + r'!"#$%&\'()*+,-.<=>@[]_~')
		name = unquote_plus(''.join( (chr if chr in name else '_')
			for chr in basename(urlparse(optz.path_or_url).path) ))
		if name and not name.endswith('.torrent'): name += '.torrent'
		name = join(optz.destination, name)
		if exists(name):
			from hashlib import md5
			def samefile_check(name):
				if md5(open(name).read()).digest() == md5(torrent).digest(): # same thing
					try_notification('Torrent already exists', 'Path: {0}'.format(name))
					sys.exit()
			name_from_url = lambda url,base: join(base, '{0}.torrent'.format(md5(url).hexdigest()))
			if realpath(name) == realpath(optz.destination):
				name = name_from_url(optz.path_or_url, optz.destination)
				if exists(name): samefile_check(name)
			else:
				samefile_check(name)
				name = name_from_url(optz.path_or_url, optz.destination)
		# print >>sys.stderr, 'Name:', name
		try: dest = open(name, 'w')
		except (OSError, IOError) as err:
			try_notification( 'Failed to add torrent file',
				'Error: {0}'.format(err), critical=True, timeout=5000 )
			sys.exit()
	dest.write(torrent)

	count_sum = len(trak_bad) + len(trak_nx)
	if not count_sum: msg = 'Trackers look alive', 'Let the leeching begin!'
	else:
		msg = list()
		if trak_bad:
			msg.append('Bogus ({0}):{1}'.format(len(trak_bad), '\n  '+'\n  '.join(trak_bad)))
		if trak_nx:
			msg.append('Unresolved ({0}):{1}'.format(len(trak_nx), '\n  '+'\n  '.join(trak_nx)))
		msg = 'Found some crappy trackers ({0} / {1})'.format(
			len(trak_bad) + len(trak_nx), count ), '\n'.join(msg)
	try_notification(*msg)


if __name__ == '__main__':
	trak_bad, trak_nx, count = list(), list(), 0
	try: main()
	except Exception as err:
		try_notification('Failed to process torrent file', '{0}: {1}'.format(type(err), err))
		raise
