#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import itertools as it, operator as op, functools as ft
from subprocess import Popen, PIPE
from io import open
import os, sys


import argparse
parser = argparse.ArgumentParser(
	description='Auto-update python package build system.'
		' Updates "version" in setup.py,'
			' produces README.txt, checks *.py files for syntax errors.'
		' Special checks are made to check if the tool is run from git pre-commit hook.')
parser.add_argument('--git-dir',
	help='Project root directory, assumed to be "." by default.')
parser.add_argument('--setup',
	help='Path to "setup.py" file to regenerate (default: $GIT_DIR/setup.py, if exists).')
optz = parser.parse_args()

if optz.git_dir: os.chdir(optz.git_dir)
if not optz.setup and os.path.exists('setup.py'): optz.setup = 'setup.py'


### Auto-detect which actvities to perform

regen_git = os.path.basename(sys.argv[0]) == 'pre-commit'
if regen_git: # break immediately if there's no changes
	if not Popen(['git', 'diff', 'HEAD', '--quiet'], env=dict()).wait(): sys.exit()

regen_setup = bool(optz.setup)
regen_docs = dict(
	readme = os.path.exists('README.md')
		and not any(map(os.path.exists, ['README', 'README.rst']))
		and os.path.exists('README.txt'),
	doc = os.path.exists('doc/Makefile') )


### Do the stuff

dirty = False # whether git-commit should be aborted

## Check for lame syntax errors
import py_compile
for src in ( line.strip() for line in
		Popen(['find', '-name', '*.py', '-print'], stdout=PIPE).stdout ):
	if src.endswith('.tpl.py'): continue # templates are, by definition, incomplete
	try: py_compile.compile(src, cfile=os.devnull, doraise=True)
	except py_compile.PyCompileError, err:
		print(
			'{} (file: {}):\n\t{}'.format(
				err.exc_type_name, err.file, err.exc_value ),
			file=sys.stderr )
		sys.exit(1)

if regen_setup:
	## Update version in setup.py

	from datetime import datetime, timedelta
	ts = datetime.now().replace( day=1, hour=0,
		minute=0, second=0, microsecond=0 ) - timedelta(0, 1)
	ver_minor = len(list(Popen([ 'git', 'rev-list',
		'--since={}'.format(ts.strftime('%Y-%m-%dT%H:%M:%S')), 'master' ], stdout=PIPE).stdout))
	version = datetime.now().strftime('%y.%m.{}').lstrip('0').format(ver_minor)

	from tempfile import NamedTemporaryFile
	import re, ast

	ast_body = lambda src: ast.parse('\n'.join(
		line for line in src if not line.strip().startswith('#') )).body

	with open(optz.setup, 'r+b') as src:
		# Find setup(...) call in module context
		for line in reversed(ast_body(src)):
			if isinstance(line, ast.Expr):
				try:
					if line.value.func.id == 'setup': break
				except AttributeError: continue
		else: raise KeyError('Failed to find "setup(...)" call in AST')
		for kw in line.value.keywords:
			if kw.arg == 'version':
				try: version_orig = kw.value.s
				except AttributeError:
					try: # check if it's properly imported from somewhere as __version__
						if (hasattr(kw.value, 'attr') and kw.value.attr == '__version__')\
							or '__version__' in kw.value.id: version_orig = False
						else: raise AttributeError(kw.value.id)
					except AttributeError: version_orig = None
				break
		else:
			raise KeyError('Failed to find "version=" keyword in setup(...) call')

		# Handle case when version is stored as __version__ inside a module
		if version_orig is False:
			from os.path import join, dirname
			from glob import iglob
			for mod_init in iglob(join(dirname(optz.setup), '*', '__init__.py')):
				with open(mod_init) as src:
					for line in reversed(ast_body(src)):
						if isinstance(line, ast.Assign)\
								and '__version__' in (getattr(t, 'id', None) for t in line.targets):
							version_orig = line.value.s
							break
			version_re = re.compile( r'(?P<pre>__version__\s*=\s*u?[\'"]+)'\
				+ re.escape(repr(version_orig).strip('\'"')) + r'(?P<post>[\'"]+)' )
			src = open(mod_init)
		elif version_orig:
			version_re = re.compile( r'(?P<pre>\bversion\s*=\s*u?[\'"]+)'\
				+ re.escape(repr(version_orig).strip('\'"')) + r'(?P<post>[\'"]+)' )

		if version_orig:
			src.seek(0)
			with NamedTemporaryFile(
					dir=os.path.dirname(src.name),
					prefix=os.path.basename(src.name + '.'), delete=False ) as tmp:
				try:
					verson_updated = False
					for line in src:
						line_org = line
						line, changes = version_re.subn(r'\g<pre>{}\g<post>'.format(version), line)
						if changes:
							if verson_updated:
								raise KeyError('Multiple lines matching "version=" regex')
							else: verson_updated = True
						tmp.write(line)
					tmp.flush()

					# Check if there's any diff in contents as a result
					from hashlib import sha1
					src.seek(0), tmp.seek(0)
					if sha1(src.read()).hexdigest() != sha1(tmp.read()).hexdigest():
						dirty = True
						os.rename(tmp.name, src.name)
				finally:
					try: os.unlink(tmp.name)
					except (OSError, IOError): pass

		src.close() # in case it was substituted with something else


if any(regen_docs.values()):
	if regen_docs.get('readme'):
		## Regenerate README.txt (ReST) from README.md (Markdown)
		from tempfile import NamedTemporaryFile
		with NamedTemporaryFile(dir='.', prefix='README.txt.', delete=False) as tmp:
			try:
				if Popen( ['pandoc', '-f', 'markdown', '-t', 'rst', 'README.md'],
						stdout=tmp, env=dict(PATH=os.environ['PATH']) ).wait():
					raise RuntimeError('pandoc process exited with error')
				os.rename(tmp.name, 'README.txt')
			except Exception as err:
				try: os.unlink(tmp.name)
				except (OSError, IOError): pass
				raise
		proc_desc = Popen([ 'python', 'setup.py',
			'--long-description' ], stdout=PIPE, env=dict(PATH=os.environ['PATH']))
		if Popen( ['rst2html.py'], stdin=proc_desc.stdout,
				stdout=open(os.devnull, 'w') ).wait() or proc_desc.wait():
			raise RuntimeError('Failed to validate produced README.txt')

	if regen_docs.get('doc'):
		## Rebuild "doc" path
		if Popen(['make'], cwd='doc', stdout=open(os.devnull, 'w')).wait():
			raise RuntimeError('Failed to rebuild stuff in "doc" dir')


if regen_git:
	## Check if no changes were made and ack the commit
	if not dirty: sys.exit(0)

	# Add new files to index asap
	if not os.fork():
		os.setsid()
		from time import sleep
		while True:
			if os.path.exists('.git/index.lock'): sleep(0.1)
			else: break
		Popen(['git', 'add', 'setup.py'], env=dict()).wait()
		sys.exit()

	# Abort the current commit due to changes made
	print('setup.py regenerated, re-initiate commit process manually', file=sys.stderr)
	sys.exit(1)
