#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

from subprocess import Popen, PIPE
from io import open
import os, sys


import argparse
parser = argparse.ArgumentParser(
	description='Auto-update python package build system.'
		' Updates "version" in setup.py,'
			' produces README.txt, checks *.py files for syntax errors.'
		' Special checks are made to check if the tool is run from git pre-commit hook.')
parser.add_argument('--git-dir',
	help='Project root directory, assumed to be "." by default.')
parser.add_argument('--setup',
	help='Path to "setup.py" file to regenerate (default: $GIT_DIR/setup.py, if exists).')
optz = parser.parse_args()

if optz.git_dir: os.chdir(optz.git_dir)
if not optz.setup and os.path.exists('setup.py'): optz.setup = 'setup.py'


### Auto-detect which actvities to perform

regen_git = os.path.basename(sys.argv[0]) == 'pre-commit'
if regen_git: # break immediately if there's no changes
	if not Popen(['git', 'diff', 'HEAD', '--quiet'], env=dict()).wait(): sys.exit()

regen_setup = bool(optz.setup)
regen_docs = os.path.exists('README.md')\
	and not any(map(os.path.exists, ['README', 'README.rst']))\
	and os.path.exists('README.txt')


### Do the stuff

if regen_git and regen_setup:
	# Will be used later to check whether hook should abort the commit
	import hashlib
	setup_hash = hashlib.sha1(open(optz.setup, 'rb').read()).hexdigest()

## Check for lame syntax errors
import py_compile
for src in ( line.strip() for line in
		Popen(['find', '-name', '*.py', '-print'], stdout=PIPE).stdout ):
	if src.endswith('.tpl.py'): continue # templates are, by definition, incomplete
	try: py_compile.compile(src, cfile='/dev/null', doraise=True)
	except py_compile.PyCompileError, err:
		print(
			'{} (file: {}):\n\t{}'.format(
				err.exc_type_name, err.file, err.exc_value ),
			file=sys.stderr )
		sys.exit(1)

if regen_setup:
	## Update version in setup.py

	from time import strftime
	ver_minor = len(list(Popen([ 'git', 'rev-list',
		'--since=%s'%strftime('01.%m.%Y'), 'master' ], stdout=PIPE).stdout))
	version = strftime('%y.%m.{}').lstrip('0').format(ver_minor)

	from tempfile import NamedTemporaryFile
	import re

	with open(optz.setup, 'r+b') as src:
		# Find setup(...) call in module context
		import ast
		for line in reversed(ast.parse(src.read()).body):
			if isinstance(line, ast.Expr):
				try:
					if line.value.func.id == 'setup': break
				except AttributeError: continue
		else: raise KeyError('Failed to find "setup(...)" call in AST')
		for kw in line.value.keywords:
			if kw.arg == 'version':
				version_orig = kw.value.s
				break
		else:
			raise KeyError('Failed to find "version=" keyword in setup(...) call')

		src.seek(0)
		version_re = re.compile( r'(?P<pre>\bversion\s*=\s*u?[\'"]+)'\
			+ re.escape(repr(version_orig).strip('\'"')) + r'(?P<post>[\'"]+)' )
		with NamedTemporaryFile(
				dir=os.path.dirname(optz.setup),
				prefix=os.path.basename(optz.setup + '.'), delete=False ) as tmp:
			try:
				verson_updated = False
				for line in src:
					line_org = line
					line, changes = version_re.subn(r'\g<pre>{}\g<post>'.format(version), line)
					if changes:
						if verson_updated:
							raise KeyError('Multiple lines matching "version=" regex')
						else: verson_updated = True
					tmp.write(line)
				tmp.flush()
				os.rename(tmp.name, src.name)
			except:
				try: os.unlink(tmp.name)
				except (OSError, IOError): pass
				raise

if regen_docs:
	## Regenerate README.txt (ReST) from README.md (Markdown)

	from tempfile import NamedTemporaryFile
	with NamedTemporaryFile(dir='.', prefix='README.txt.', delete=False) as tmp:
		try:
			if Popen( ['pandoc', '-f', 'markdown', '-t', 'rst', 'README.md'],
					stdout=tmp, env=dict(PATH=os.environ['PATH']) ).wait():
				raise RuntimeError('pandoc process exited with error')
			os.rename(tmp.name, 'README.txt')
		except Exception as err:
			try: os.unlink(tmp.name)
			except (OSError, IOError): pass
			raise
	proc_desc = Popen([ 'python', 'setup.py',
		'--long-description' ], stdout=PIPE, env=dict(PATH=os.environ['PATH']))
	if Popen( ['rst2html.py'], stdin=proc_desc.stdout,
			stdout=open('/dev/null', 'wb') ).wait() or proc_desc.wait():
		raise RuntimeError('Failed to validate produced README.txt')

if regen_git:
	## Check if no changes to setup.py were made and ack the commit

	import hashlib
	if hashlib.sha1(open(optz.setup, 'rb').read()).hexdigest() == setup_hash: sys.exit(0)

	# Add new files to index asap
	if not os.fork():
		os.setsid()
		from time import sleep
		while True:
			if os.path.exists('.git/index.lock'): sleep(0.1)
			else: break
		Popen(['git', 'add', 'setup.py'], env=dict()).wait()
		sys.exit()

	# Abort the current commit due to changes made
	print('setup.py regenerated, re-initiate commit process manually', file=sys.stderr)
	sys.exit(1)
