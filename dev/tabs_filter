#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import unicode_literals, print_function

import itertools as it, operator as op, functools as ft
import os, sys, re, codecs


def parse_cli( argv=sys.argv,
		_flags='a', _actions={'clean', 'smudge', 'mangle', 'unmangle'} ):
	# Yeah, argparse rocks ;)
	if not argv[1:]:
		print(( 'Usage: {} [ space_num [ flags ] ]'
			' ( clean | smudge | mangle | unmangle ) path' ).format(argv[0]), file=sys.stderr)
		print('Flags:\n'
			'  a - remove or replace alignment spaces (non-divisable by indent).',
			file=sys.stderr )
		sys.exit(1)
	convert, flags = 4, ''
	argv = argv[1:]
	try: action, path = argv
	except ValueError:
		try: convert, action, path = argv
		except ValueError: convert, flags, action, path = argv
	enc, convert = 'utf-8', ['\t', int(convert)]
	if action not in _actions:
		raise ValueError( 'Unknown action'
			' ({}), allowed: {}'.format(action, ', '.join(_actions)) )
	if set(flags).difference(_flags):
		raise ValueError( 'Unknown flags specified'
			' ({}), allowed: [{}]'.format(flags, '] ['.join(_flags)) )
	return action, path, convert, flags, enc

action, path, convert, flags, enc = parse_cli()


codecs = list(getattr(codecs, k)(enc) for k in ['getreader', 'getwriter'])
for k, codec in it.izip(['stdin', 'stdout'], codecs):
	setattr(sys, k, codec(getattr(sys, k)))


def get_cpos(line, cpos=0):
	lb = line.split('#', 1)
	if len(lb) > 1:
		for s in '\'"':
			lb[1] = re.sub(r"\b'\b", '', lb[1])
			if lb[0].count(s) % 2 and lb[1].count(s) % 2:
				break # not a comment (quoted hashmark)
		else: return cpos + len(lb[0]) # genuine comment
		if '#' not in lb[1]: return None
		return get_cpos('!'.join(lb))
	else: return None

def filter_base(src, seqs, dst=sys.stdout):
	src_seq, dst_seq = (( (' '*seq)
		if isinstance(seq, int) else seq ) for seq in seqs)
	src_seq_len = len(src_seq)
	for line in src:
		indent = ''
		while line.startswith(src_seq):
			indent, line = dst_seq+indent, line[src_seq_len:]
		# Quirky stuff
		if isinstance(seqs[0], int): # spaces -> tabs
			# Handle half-indents and space-alignment
			if 'a' in flags:
				if src_seq_len > 1 and line.startswith(' '):
					line, line_len = line.lstrip(' '), len(line)
					if line_len - len(line) >= float(seqs[0]) / 2: indent += dst_seq
			elif path.endswith('.py') and line.startswith(' ')\
					and not line.rstrip().endswith('\\') and not re.search(r'^.*#!as(\d+)(#.*?)?$', line):
				# Insert "#!as2"-style mark to the end of the line to restore alignment indent later
				alen = len(line)
				line = line.lstrip(' ')
				cpos = get_cpos(line) # detect comments
				alen = '#!as{}'.format(alen - len(line))
				line = line.rstrip('\r\n')
				if cpos is None: line += ' ' + alen
				else: line = line[:cpos] + alen + line[cpos:]
				line += '\n'
		else: # tabs -> spaces
			if 'a' not in flags:
				match = re.search(r'^.*#!as(?P<alen>\d+)(?P<c>(#.*?)?)$', line)
				if match: # strip "#!as2"-style marks
					alen = match.group('alen')
					line = ' '*int(alen)\
						+ re.sub( r'^(.*)({}#!as\d+)((#.*?)?)$'\
							.format(' ' if not match.group('c') else ''), r'\1\3', line )
		# Done
		dst.write(indent + line)

# convert = [from: str or int, to: str or int], where int is a number of spaces
filter_clean = ft.partial(filter_base, seqs=convert)
filter_smudge = ft.partial(filter_base, seqs=list(reversed(convert)))


def _dump_call_data_on_err(func, *argz, **kwz):
	try: return func(*argz, **kwz)
	except Exception as err:
		print('sys.argv: {}'.format(sys.argv), file=sys.stderr)
		raise


# git-friendly actions
if action == 'clean': _dump_call_data_on_err(filter_clean, sys.stdin)
elif action == 'smudge': _dump_call_data_on_err(filter_smudge, sys.stdin)

# manual ones
elif action in ['mangle', 'unmangle']:
	from tempfile import NamedTemporaryFile
	import io, stat, hashlib

	with codecs[1](NamedTemporaryFile(
			delete=False,
			dir=os.path.dirname(path),
			prefix=os.path.basename(path + '.') )) as tmp:
		try:
			(filter_smudge if action == 'mangle' else filter_clean)\
				(io.open(path, encoding=enc), dst=tmp)
			tmp.flush()
			if not op.eq(*(hashlib.sha1(
					io.open(path, 'rb').read() ).digest() for path in [path, tmp.name])):
				os.chmod(tmp.name, stat.S_IMODE(os.stat(path).st_mode))
				os.rename(tmp.name, path)
		finally:
			if os.path.exists(tmp.name):
				try: os.unlink(tmp.name)
				except Exception as err:
					print('Failed to remove tmp file ({}): {}'.format(tmp.name, err), file=sys.stderr)

else:
	raise ValueError('Unsupported action: {}'.format(action))
