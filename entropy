#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import os, sys, struct, fcntl

RNDADDENTROPY = 0x40085203 # /usr/include/linux/random.h

def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Script to feed linux entropy pool, e.g. to stop'
			' dumb tools like gpg blocking forever on "pacman --init" in a throwaway chroot.',
		epilog='Note that using this tool can compromise non-deterministic crypto-related stuff'
			' running on the system, so it might not be a good idea to use it on anything'
			' internet-facing or machines running anything other than specific'
			' /dev/random-gobbling tools that should be worked around.')
	parser.add_argument('src', nargs='?',
		help='Entropy source file. Stdin will be used if omitted.')
	parser.add_argument('-n', '--bytes', type=int,
		help='Number of bytes to read for specified source file. All of them, if not specified.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	pool_fd = src = None
	try:
		pool_fd = os.open('/dev/random', os.O_WRONLY)
		src = open(opts.src, 'rb') if opts.src else os.fdopen(sys.stdin.fileno(), 'rb')

		n, bs = opts.bytes, 512 # ioctl doesn't like huge chunks
		while n is None or n > 0:
			chunk = src.read(min(n or bs, bs))
			if not chunk: break
			m = len(chunk)
			if n is not None: n -= m
			chunk = struct.pack(u'ii{}s'.format(m).encode('ascii'), 8 * m, m, chunk)
			fcntl.ioctl(pool_fd, RNDADDENTROPY, chunk)

	finally:
		if pool_fd is not None: os.close(pool_fd)
		if src: src.close()

if __name__ == '__main__': sys.exit(main())
