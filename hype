#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
from contextlib import contextmanager
import json, socket, string
import os, sys, io, re, types

from hashlib import sha256, sha512
import pyaml


### For bencode bits below
# Different from vanilla bencode in handling "leading zeroes" in keys
# Derived from a thing under BitTorrent Open Source License
# Written by Petru Paler

def _ns_class(cls_name, cls_parents, cls_attrs):
	for k, v in cls_attrs.viewitems():
		if isinstance(v, types.FunctionType):
			cls_attrs[k] = classmethod(v)
	return type(cls_name, cls_parents, cls_attrs)

class BTEError(Exception): pass

class Bencached(object):
	__slots__ = 'bencoded',
	def __init__(self, s): self.bencoded = s

class BTE(object):
	__metaclass__ = _ns_class

	def decode_int(cls, x, f):
		f += 1
		newf = x.index('e', f)
		n = int(x[f:newf])
		if x[f] == '-':
			if x[f + 1] == '0': raise ValueError
		elif x[f] == '0' and newf != f+1: raise ValueError
		return (n, newf+1)
	def decode_string(cls, x, f):
		colon = x.index(':', f)
		n = int(x[f:colon])
		# if x[f] == '0' and colon != f+1: raise ValueError -- cjdns-specific mod
		colon += 1
		return (x[colon:colon+n], colon+n)
	def decode_list(cls, x, f):
		r, f = [], f+1
		while x[f] != 'e':
			v, f = cls.decode_func[x[f]](cls, x, f)
			r.append(v)
		return (r, f + 1)
	def decode_dict(cls, x, f):
		r, f = {}, f+1
		while x[f] != 'e':
			k, f = cls.decode_string(x, f)
			r[k], f = cls.decode_func[x[f]](cls, x, f)
		return (r, f + 1)
	decode_func = dict(l=decode_list, d=decode_dict, i=decode_int)
	for n in xrange(10): decode_func[bytes(n)] = decode_string

	def encode_bencached(cls, x, r): r.append(x.bencoded)
	def encode_int(cls, x, r): r.extend(('i', str(x), 'e'))
	def encode_bool(cls, x, r):
		if x: BTE.encode_int(cls, 1, r)
		else: BTE.encode_int(cls, 0, r)
	def encode_string(cls, x, r): r.extend((str(len(x)), ':', x))
	def encode_list(cls, x, r):
		r.append('l')
		for i in x: cls.encode_func[type(i)](cls, i, r)
		r.append('e')
	def encode_dict(cls, x, r):
		r.append('d')
		ilist = x.items()
		ilist.sort()
		for k, v in ilist:
			r.extend((str(len(k)), ':', k))
			cls.encode_func[type(v)](cls, v, r)
		r.append('e')
	encode_func = {
		Bencached: encode_bencached,
		types.IntType: encode_int,
		types.LongType: encode_int,
		types.StringType: encode_string,
		types.ListType: encode_list,
		types.TupleType: encode_list,
		types.DictType: encode_dict,
		types.BooleanType: encode_bool }

	def bdecode(cls, x):
		try: r, l = cls.decode_func[x[0]](cls, x, 0)
		except (IndexError, KeyError, ValueError) as err:
			raise BTEError('Not a valid bencoded string: {}'.format(err))
		if l != len(x):
			raise BTEError('Invalid bencoded value (data after valid prefix)')
		return r

	def bencode(cls, x):
		r = []
		cls.encode_func[type(x)](cls, x, r)
		return ''.join(r)



def read_admin_conf():
	conf_admin, conf_admin_path = None,\
		os.path.expanduser('~/.cjdnsadmin')
	with io.open(conf_admin_path, encoding='utf-8') as src:
		return json.load(src)


def public_to_ipv6(key, colons=False,
		_cjdns_b32_map = [ # directly from util/Base32.h
			99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
			99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
			99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9,99,99,99,99,99,99,
			99,99,10,11,12,99,13,14,15,99,16,17,18,19,20,99,
			21,22,23,24,25,26,27,28,29,30,31,99,99,99,99,99,
			99,99,10,11,12,99,13,14,15,99,16,17,18,19,20,99,
			21,22,23,24,25,26,27,28,29,30,31,99,99,99,99,99 ]):
	if key.endswith('.k'): key = key[:-2]

	bits, byte, res = 0, 0, list()
	for c in key:
		n = _cjdns_b32_map[ord(c)]
		if n > 31: raise ValueError('Invalid key: {!r}, char: {!r}'.format(key, n))
		byte |= n << bits
		bits += 5
		if bits >= 8:
			bits -= 8
			res.append(chr(byte & 0xff))
			byte >>= 8
	if bits >= 5 or byte:
		raise ValueError('Invalid key length: {!r} (leftover bits: {})'.format(key, bits))
	res = ''.join(res)

	from hashlib import sha512
	addr = sha512(sha512(res).digest()).hexdigest()[:32]
	assert addr[:2] == 'fc', addr

	if colons: addr = ':'.join(addr[n*4:(n+1)*4] for n in xrange(8))
	return addr


def int2base(x, base, _digs=string.digits+string.lowercase):
	if x < 0: sign = -1
	elif x==0: return '0'
	else: sign = 1
	x *= sign
	digits = []
	while x:
		digits.append(_digs[x % base])
		x /= base
	if sign < 0: digits.append('-')
	digits.reverse()
	return ''.join(digits)

print_bin = lambda v: print(int2base(v, 2))

def path2int(path):
	return int(path.replace('.', ''), 16)

def path_breakdown(path):
	res, pint = list(), '000' + int2base(path2int(path), 2)
	while True:
		if pint.endswith('0001'): return res
		elif pint.endswith('1'): chop = 4
		elif pint.endswith('10'): chop = 7
		elif pint.endswith('00'): chop = 10
		else: raise ValueError('Unknown hop encoding: {}'.format(pint))
		res.append(int(pint[-chop:], 2))
		pint = pint[:-chop]


def pbkdf2(password, salt, iterations, dklen=0):
	'PBKDF2 (RFC 2898, section 5.2), as implemented in Django.'
	assert iterations > 0
	from hashlib import sha256
	import binascii, struct
	digest, hlen, hb = sha256, long(32), long(64)
	_long_to_bin = lambda x, hex_format_string:\
		binascii.unhexlify(hex_format_string % x)
	_bin_to_long = lambda x: long(x.encode('hex'), 16)
	def _fast_hmac(key, msg):
		dig1, dig2 = digest(), digest()
		if len(key) > hb:
			key = digest(key).digest()
		key += chr(0) * (hb - len(key))
		dig1.update(key.translate(_trans_36))
		dig1.update(msg)
		dig2.update(key.translate(_trans_5c))
		dig2.update(dig1.digest())
		return dig2
	_trans_5c = "".join([chr(x ^ 0x5C) for x in xrange(256)])
	_trans_36 = "".join([chr(x ^ 0x36) for x in xrange(256)])
	if not dklen: dklen = hlen
	if dklen > (2 ** 32 - 1) * hlen: raise OverflowError('dklen too big')
	l = -(-dklen // hlen)
	r = dklen - (l - 1) * hlen
	hex_format_string = "%%0%ix" % (hlen * 2)
	def F(i):
		def U():
			u = salt + struct.pack('>I', i)
			for j in xrange(int(iterations)):
				u = _fast_hmac(password, u).digest()
				yield _bin_to_long(u)
		return _long_to_bin(reduce(op.xor, U()), hex_format_string)
	T = [F(x) for x in range(1, l + 1)]
	return ''.join(T[:-1]) + T[-1][:r]


class CjdnsAdminError(Exception): pass

class CjdnsAdmin(object):

	def __init__(self, conf=None, timeout=2, bs=2**30):
		if conf is None: conf = read_admin_conf()

		sock_addr = conf['addr'], conf['port']
		log.debug('Using cjdns socket: %s:%s', *sock_addr)
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.sock.connect(sock_addr)
		self.sock.settimeout(timeout)

		self.bs = bs
		self.admin_password = conf['password']

	def get_txid(self):
		return os.urandom(5).encode('hex')

	def __call__(self, call, _auth=True, **call_args):
		if not _auth:
			req = dict(q=call, args=call_args, txid=self.get_txid())
		else:
			try:
				self.sock.send(BTE.bencode(dict(q='cookie')))
				cookie = BTE.bdecode(self.sock.recv(self.bs))['cookie']
			except Exception as err:
				raise
				raise CjdnsAdminError('Failed to get auth cookie', err)
			req = dict( q='auth',
				aq='InterfaceController_peerStats',
				args=call_args,
				hash=sha256('{}{}'.format(self.admin_password, cookie)).hexdigest(),
				cookie=cookie, txid=self.get_txid() )
			req['hash'] = sha256(BTE.bencode(req)).hexdigest()
		try:
			self.sock.send(BTE.bencode(req))
			res = BTE.bdecode(self.sock.recv(self.bs))
			assert res.get('txid') == req['txid'], [req, res]
		except Exception as err:
			raise CjdnsAdminError('Failure communicating with cjdns', err)
		return res

	def get_peer_stats(self):
		peers, page, more = list(), 0, True
		while more:
			res = self('InterfaceController_peerStats', page=page)
			peers.extend(res['peers'])
			more, page = res.get('more'), page + 1
		return peers


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(description='cjdns control tool.')
	parser.add_argument('-d', '--debug', action='store_true', help='Verbose operation mode.')

	cmds = parser.add_subparsers(
		title='Supported operations (have their own suboptions as well)')

	@contextmanager
	def subcommand(name, **kwz):
		cmd = cmds.add_parser(name, **kwz)
		cmd.set_defaults(call=name)
		yield cmd

	with subcommand('ipv6-to-record',
			help='Convert IPv6 address to "*.ip6.arpa" (or other) domain name format.') as cmd:
		cmd.add_argument('ipv6_address', help='Address to convert.')
		cmd.add_argument('-d', '--djbdns',
			action='store_true', help='Convert to canonical djbdns record format.')

	with subcommand('key-to-ipv6',
			help='Convert public cjdns key to IPv6 address.') as cmd:
		cmd.add_argument('key', help='Key to convert.')
		cmd.add_argument('-d', '--djbdns',
			action='store_true', help='Convert to canonical djbdns record format.')
		cmd.add_argument('-r', '--record',
			action='store_true', help='Convert to "*.ip6.arpa" (or other) domain name format.')

	with subcommand('decode-path', help='Decode switchLabel path.') as cmd:
		cmd.add_argument('path', nargs='+',
			help='Hex-encoded path string, possibly with dots in it (example: 0000.013c.bed9.5363).')
		cmd.add_argument('-e', '--echo', action='store_true',
			help='Force echo input path(s) as well.')

	with subcommand('conf-paste',
			help='Obfuscate cjdns config (cjdroute.conf) in a secure and deterministic way.') as cmd:
		paste_checklist = {'privateKey', 'publicKey', 'password'}
		paste_checklist_optional = {'password'}
		cmd.add_argument('config',
			nargs='?', help='Path to source cjdroute.conf configuration file.')
		cmd.add_argument('-f', '--peer-password-regexp',
			default=r'^[^.]+\.(?P<password>.*)$',
			help='Regexp to obfuscate only "password"'
				' match group (if matches the entry at all). Default: %(default)s')
		cmd.add_argument('-s', '--pbkdf2-salt', metavar='any_string',
			help='Use fixed PBKDF2 salt value for all operations (default is to use random string).'
				' Must remain same between runs to produce'
					' same output - which is not the case without this option.')
		cmd.add_argument('-i', '--pbkdf2-iteratiions',
			metavar='integer', type=int, default=int(1e5),
			help='Number of PBKDF2 iterations to produce hashed data (default: %(default)s).'
				' Must remain same between runs to produce same output.')
		cmd.add_argument('-l', '--truncate', metavar='integer', type=int, default=10,
			help='Truncate obfuscated base64-encoded values to this length.')
		cmd.add_argument('-x', '--skip', metavar='keyword', action='append', default=list(),
			help='Skip obfuscating certain values. Can be specified multiple times.'
				' Possible keywords: {}.'.format(', '.join(paste_checklist)))

	with subcommand('peers', help='Get peer information.') as cmd:
		cmd.add_argument('-r', '--raw', action='store_true',
			help='Only output what cjdns returns, do not add any derivative data.')

	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	global log
	import logging
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = logging.getLogger()

	if opts.call == 'ipv6-to-record':
		import ipaddr
		addr = ipaddr.IPv6Address(opts.ipv6_address).exploded
		log.debug('Exploded address: {}'.format(addr))
		addr = addr.replace(':', '')
		if not opts.djbdns: print('.'.join(reversed(addr)) + '.ip6.arpa')
		else: print(addr)

	elif opts.call == 'key-to-ipv6':
		colons = not (opts.djbdns or opts.record)
		addr = public_to_ipv6(opts.key, colons=colons)
		if opts.djbdns: print(addr)
		elif opts.record: print('.'.join(reversed(addr)) + '.ip6.arpa')
		else: print(addr)

	elif opts.call == 'decode-path':
		if len(opts.path) > 1: opts.echo = True
		for path in opts.path:
			if opts.echo: print(path, end=' ')
			print(' '.join(it.imap(bytes, path_breakdown(path))))

	elif opts.call == 'conf-paste':
		if not opts.pbkdf2_salt: opts.pbkdf2_salt = os.urandom(16)
		src = (io.open(opts.config, encoding='utf-8') if opts.config else sys.stdin).read()

		def regexp_for_key(key, _space_like=r'(\s+|//.*?\n)*'):
			return re.compile(r'(?s)"{1}"{0}:{0}"(?P<val>[^"]*)"'.format(_space_like, k))
		def nice_b64(val):
			return val.encode('base64').rstrip('=\n').replace('/', '-')[:opts.truncate]

		paste_checklist.difference_update(opts.skip)

		for k in list(paste_checklist):
			for match in reversed(list(regexp_for_key(k).finditer(src))):
				a, b = match.span('val')
				val, salt = src[a:b], opts.pbkdf2_salt

				val_match = re.search(opts.peer_password_regexp, val)\
					if k == 'password' else None
				if val_match:
					# Rest of the value will be added to salt,
					#  so that same password for diff names should produce diff values
					c, d = val_match.span('password')
					subst = nice_b64(pbkdf2(
						val_match.group('password'),
						salt + val[:c] + val[d:], opts.pbkdf2_iteratiions ))
					val = val[:c] + subst + val[d:]
				else:
					val = nice_b64(pbkdf2(val, salt, opts.pbkdf2_iteratiions))

				src = src[:a] + val + src[b:]
				paste_checklist.discard(k)

		paste_checklist.difference_update(paste_checklist_optional)
		if paste_checklist:
			print( 'Failed to make mandatory replacements'
				' for keywords: {}'.format(', '.join(paste_checklist)), file=sys.stderr )
			sys.exit(1)

		sys.stdout.write(src)

	elif opts.call == 'peers':
		admin = CjdnsAdmin()
		res = admin.get_peer_stats()
		for p in res:
			p['ipv6'] = public_to_ipv6(p['publicKey'], colons=True)
		pyaml.dump(res, sys.stdout)

	else: parser.error('Unrecognized command: {}'.format(opts.call))


if __name__ == '__main__': sys.exit(main())
