#!/usr/bin/env python
# -*- coding: utf-8 -*-

from optparse import OptionParser
parser = OptionParser(usage='%prog [options] [ SRC DST ... ] [ [-b] FILE ]',
	description='stdin/file -> regexp -> stdout/file[b]')
parser.add_option('-b', '--buffer',
	action='store_true', dest='buff',
	help='Flush output back to file.')
parser.add_option('-i', '--iterations',
	action='store', dest='iterations',
	type='int', metavar='NUM', default=1,
	help='Perform given substitutions given number of times.')
parser.add_option('-s', '--src-enc',
	action='store', type='str',
	dest='src_enc', metavar='ENC',
	help='Decode input as... (unset)')
parser.add_option('-d', '--dst-enc',
	action='store', type='str',
	dest='dst_enc', metavar='ENC',
	help='Encode output as... (unset)')
parser.add_option('-f',
	action='store', type='str',
	dest='re', metavar='REGEX',
	help='Regex to seek in each line. Ignored if pairs are given as args.')
parser.add_option('-t',
	action='store', type='str',
	dest='sub', metavar='SUB', default='',
	help='Given regex substitution. Ignored if pairs are given as args.')
optz, argz = parser.parse_args()


import itertools as it, operator as op, functools as ft
from cStringIO import StringIO as sio
import os, sys, re

src = len(argz) % 2
if optz.buff and not src: parser.error('Need FILE argument with -b')
if len(argz) >= 2:
	sub_pairs = list( (re.compile(argz[arg]), argz[arg+1])
		for arg in xrange(0, len(argz) - src, 2) )
else: sub_pairs = [(re.compile(optz.re), optz.sub)]
src = open(argz[-1]) if src else sys.stdin

def sed(src, dst, sub_pairs):
	src.seek(0, os.SEEK_SET)
	for line in src:
		line = line.rstrip('\n\r')
		if optz.src_enc: line = line.decode(optz.src_enc)
		for re,sub in sub_pairs: line = re.sub(sub, line)
		if optz.dst_enc: line = line.encode(optz.dst_enc)
		dst.write(line+'\n')
	dst.flush()
	return dst

dst_direct = (optz.iterations == 1 and not optz.buff)
for i in xrange(optz.iterations):
	dst = sys.stdout if dst_direct else sio()
	dst = sed(src, dst, sub_pairs)
	src = dst

if not optz.buff and dst_direct: sys.exit()

src.seek(0, os.SEEK_SET)
dst = sys.stdout if not optz.buff\
	else open(argz[-1], 'wb')
for line in src: dst.write(line)
dst.flush()
