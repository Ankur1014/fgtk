#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
import os, sys, re


# http://refspecs.linuxfoundation.org/LSB_3.2.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
test_code_ok = 0
test_code_err = 150


def sort_lines(lines_src, n=None, sep=None, field_proc=None):
	lines = list()
	for line in lines_src:
		line_end = line.rstrip('\r\n')
		line, line_end = line_end, line[len(line_end):]
		if n is None: k = line
		else:
			if sep is not None: fields = line.split(sep)
			else: fields = re.split(r'\s+', line.strip())
			k = fields[n]
			if field_proc is not None: k = field_proc(k)
		lines.append((k, line, line_end))
	lines.sort()
	return ''.join((line + line_end) for k, line, line_end in lines)


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Sort contents of a file(s) or stdin.' )

	parser.add_argument('file', nargs='*',
		help='File(s) to sort. Stdin is used if none are specified. Required with -b option.')

	parser.add_argument('-d', '--sep', metavar='separator',
		help='Field delimiter (default: split on spaces).')
	parser.add_argument('-f', '--field',
		type=int, metavar='number', default=None,
		help='Sort-by field number (zero-indexed).')
	parser.add_argument('-n', '--numeric', action='store_true',
		help='Convert field values to floats (default: alpha-sort). Only used with -f.')

	parser.add_argument('-b', '--buff', action='store_true', help='Flush output back to file(s).')

	parser.add_argument('-t', '--test', action='store_true',
		help=( 'Do not sort, only test whether contents are sorted already.'
				' Exit status will be {} if test succeeds, {} otherwise.'
			).format(test_code_ok, test_code_err) )

	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	if opts.buff and not opts.file: parser.error('File arguments are required with -b')
	if opts.test and opts.file and len(opts.file) > 1:
		parser.error('Only one file argument is allowed with -t')
	if opts.sep == '': parser.error('Separator cannot be an empty string')

	sort_func = ft.partial( sort_lines,
		sep=opts.sep, n=opts.field,
		field_proc=float if opts.numeric else None )

	if not opts.file:
		sys.stdout.write(sort_func(iter(sys.stdin.readline, '')))

	else:
		for p in opts.file:
			with open(p, 'rb') as src:
				buff = sort_func(iter(src.readline, ''))
				if opts.test:
					src.seek(0)
					buff2 = src.read()
					return test_code_ok if buff == buff2 else test_code_err
				if not opts.buff: sys.stdout.write(buff)
				else:
					with open(p, 'wb') as dst: dst.write(buff)

if __name__ == '__main__': sys.exit(main())
