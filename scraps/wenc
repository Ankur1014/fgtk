#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
import os, sys, io, types, base64, string

import libnacl
from libnacl.public import SecretKey, PublicKey, Box

from libraptorq import RQEncoder, RQDecoder, RQError


p = lambda fmt,*a,**k:\
	print(*( [fmt.format(*a,**k)]\
		if isinstance(fmt, types.StringTypes) and (a or k)
		else [[fmt] + list(a), k] ), file=sys.stderr)

b64_encode = base64.urlsafe_b64encode
b64_decode = lambda s:\
	base64.urlsafe_b64decode(bytes(s))\
		if '-' in s or '_' in s else bytes(s).decode('base64')

_b32_abcs = (
	u'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	u'абвгдежзиклмнопрстуфхцчшыьэОяZ,.' ) # Z=num/hyph/colon

def b32_encode(v, _trans=dict(
		(ord(a), ord(b)) for a,b in it.izip(*_b32_abcs) )):
	return base64.b32encode(v).strip()\
		.decode('utf-8').translate(_trans).encode('utf-8')

def b32_decode(v, _trans=dict(
		(ord(b), ord(a)) for a,b in it.izip(*_b32_abcs) )):
	v += u'=' * (4 - len(v) % 4)
	return base64.b32decode(v.strip().translate(_trans).encode('utf-8'))

num_fmt = lambda n: '{:,}'.format(n)


def main(args=None, error_func=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Encrypt/fountain-code/b32 data from stdin to stdout.')

	parser.add_argument('-k', '--keyfile', metavar='path',
		help='Path with base64-encoded Curve25519'
			' sk on the first line and pk to encode data to on the second.')

	parser.add_argument('-s', '--sym-size',
		type=int, metavar='bytes', default=8,
		help='RaptorQ fountain-coding symbol size. Default: %(default)s')
	parser.add_argument('-r', '--sym-repair-rate',
		type=float, metavar='float', default=0,
		help='Amount of repair symbols to generate,'
			' as a fraction of data size. Default: %(default)s')

	parser.add_argument('-d', '--decode', nargs='?',
		metavar='oti_schema_hex || "-" || oti_common_hex', const='20000008-1000104',
		help='Decode/decrypt stdin instead of encoding.'
			' Should be supplied with RaptorQ encoding'
				' parameters to use for decoding. Default: %(const)s')

	parser.add_argument('--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	global log
	import logging
	logging.basicConfig(
		format='%(asctime)s :: %(levelname)s :: %(message)s',
		datefmt='%Y-%m-%d %H:%M:%S',
		level=logging.DEBUG if opts.debug else logging.WARNING )
	log = logging.getLogger()

	data = sys.stdin.read()
	log.debug('Input data: %sB', num_fmt(len(data)))

	if opts.keyfile:
		with open(opts.keyfile, 'rb') as src:
			sk, pk = map(b64_decode, src.read().splitlines())
		box = Box(SecretKey(sk), PublicKey(pk))


	if not opts.decode:
		if opts.keyfile:
			data = box.encrypt(data)
			log.debug('Ciphertext: %sB', num_fmt(len(data)))

		with RQEncoder( data, min_subsymbol_size=4,
				symbol_size=opts.sym_size, max_memory=4000 ) as enc:
			oti_scheme, oti_common = enc.oti_scheme, enc.oti_common
			print('oti_params: {:x}-{:x}'.format(oti_common, oti_scheme))

			blocks = list(enc)
			assert len(blocks) == 1, len(blocks)
			block, = blocks

			data_syms = map( op.itemgetter(1),
				block.encode_iter(repair_rate=opts.sym_repair_rate) )

		log.debug( 'Produced %s symbols (%sB total)',
			len(data_syms), num_fmt(len(''.join(data_syms))) )

		n_abc = _b32_abcs[1]
		for n, sym in enumerate(data_syms):
			print('{:02d} {} {}'.format(
				n, n_abc[n % len(n_abc)].encode('utf-8'), b32_encode(sym).rstrip('=') ))


	else:
		oti_common, oti_scheme = (int(n, 16) for n in opts.decode.split('-'))
		n_abc = _b32_abcs[1]

		with RQDecoder(oti_common, oti_scheme) as dec:
			for line in data.splitlines():
				if not line or line.startswith('#'): continue
				line = u''.join(line.decode('utf-8').split())
				n, sym = n_abc.find(line[0]), b32_decode(line[1:])
				try: dec.add_symbol(sym, esi=n, sbn=0)
				except RQError as err: pass
			data = dec.decode()

		if opts.keyfile: data = box.decrypt(data)
		sys.stdout.write(data)


if __name__ == '__main__': sys.exit(main())
