#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals, print_function

import itertools as it, operator as op, functools as ft
from subprocess import Popen, PIPE, STDOUT
import os, sys, unicodedata

import dbus


def main(argv=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Tool to compare the set of enabled'
			' systemd services against currently running ones.\n'
		'If started without parameters, it\'ll just show all the enabled services'
			' that should be running (Type != oneshot) yet for some reason they aren\'t.')
	parser.add_argument('-s', '--status', action='store_true',
		help='Show status report on found services.')
	parser.add_argument('-n', '--not-enabled', action='store_true',
		help='Show list of services that are running but are not enabled directly.')
	parser.add_argument('-x', '--systemd-internals', action='store_true',
		help='Dont exclude systemd internal services from the output.')
	optz = parser.parse_args()

	bus = dbus.SystemBus()
	systemd = bus.get_object(
		'org.freedesktop.systemd1', '/org/freedesktop/systemd1' )

	if optz.not_enabled:
		not_enabled = set( unicode(unit[0])
			for unit in systemd.ListUnits()
			if unit[0].endswith('.service') and unit[3] == 'active' )

	def show_status(unit_name):
		if not optz.systemd_internals and unit_name.startswith('systemd-'): return
		if not optz.status: print(unit_name)
		else:
			print()
			Popen(['systemctl', 'status', unicode(unit_name)]).wait()

	proc = Popen(['systemctl', '--full', 'list-dependencies'], stdout=PIPE)

	for line in proc.stdout:
		line = line.strip().decode('utf-8')
		for i,c in enumerate(line):
			if unicodedata.category(c) not in ['Zs', 'So']: break
		else: continue
		unit_name = line[i:]

		# Not really interested in anything else
		if not unit_name.endswith('.service'): continue

		if optz.not_enabled:
			not_enabled.discard(unit_name)
			continue

		unit = bus.get_object('org.freedesktop.systemd1', systemd.GetUnit(unit_name))
		if unit.Get('org.freedesktop.systemd1.Service', 'Type') == 'oneshot': continue
		state = dict(
			( k.lower(),
				unicode(unit.Get('org.freedesktop.systemd1.Unit', '{}State'.format(k))) )
			for k in ['Load', 'Active', 'Sub'] )
		if state['load'] not in ['error', 'not-found'] and state['active'] != 'active':
			show_status(unit_name)

	if proc.wait():
		raise RuntimeError('list-dependencies command failed')

	if optz.not_enabled:
		for unit_name in not_enabled:
			unit = bus.get_object('org.freedesktop.systemd1', systemd.GetUnit(unit_name))
			if unit.Get('org.freedesktop.systemd1.Service', 'Type') == 'oneshot': continue
			show_status(unit_name)


if __name__ == '__main__': sys.exit(main())
