#!/usr/bin/env python2
#-*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
from systemd import daemon
import os, sys, time, subprocess, tempfile


p_err = lambda tpl,*a,**k: print(tpl.format(*a, **kw), file=sys.stderr)
dev_null = open(os.devnull, 'wb')


def actions():
	## Any crash or hang here will be treated as a fatal failure
	## These actions must take less time than systemd watchdog interval

	# Processes can be forked and exec'ed and fs doesn't hang
	subprocess.check_call(['/bin/true'])
	subprocess.check_call(
		['/bin/ls', '-lah', '/', '/usr', '/var', '/etc', '/srv', '/home', '/dev'], stdout=dev_null )

	# tmpfs can be written to and urandom works
	with tempfile.NamedTemporaryFile() as tmp:
		for n in xrange(10):
			tmp.write(os.urandom(200 * 2**10))
			tmp.flush()
			time.sleep(0.2)
		os.fsync(tmp.fileno())
		assert tmp.tell() > 0, tmp.tell()
		tmp.seek(0)
		tmp.truncate()
		tmp.flush()
		os.fsync(tmp.fileno())
		assert tmp.tell() == 0, tmp.tell()


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Run simple fork/write ops every'
			' once in a while, crashing if one of these fail or hang.')
	parser.add_argument('-i', '--interval',
		type=float, default=60, metavar='seconds',
		help='Interval between running actions, in seconds (default: %(default)s).')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	wd_interval = None
	wd_pid, wd_usec = (os.environ.get(k) for k in ['WATCHDOG_PID', 'WATCHDOG_USEC'])
	if wd_pid and wd_pid.isdigit(): wd_pid = int(wd_pid)
	pid = os.getpid()
	if wd_pid == pid:
		try:
			wd_interval = float(wd_usec) / 2e6 # half of the interval in seconds
			if wd_interval <= 0: raise ValueError('Watchdog interval must be >=0, if enabled')
		except ValueError as err:
			p_err('Invalid watchdog interval spec {!r}: {}', wd_usec, err)
			sys.exit(1)
	else:
		print('Systemd watchdog seem to be disabled (wd_pid: {!r}, pid: {!r})'.format(wd_pid, pid))

	daemon.notify('READY=1')
	daemon.notify(
		'STATUS=Main loop, action/systemd-watchdog interval: {:.1f}/{}'\
		.format(opts.interval, '{:.1f}'.format(wd_interval) if wd_interval else 'disabled') )

	ts_actions = ts_wd = None
	while True:
		ts = time.time()

		if ts_actions is None: ts_actions = ts + opts.interval
		ts_delay = ts_actions
		if ts_actions <= ts:
			actions()
			ts_actions = None

		if wd_interval:
			if ts_wd is None: ts_wd = ts + wd_interval
			ts_delay = min(ts_delay, ts_wd)
			if ts_wd <= ts:
				daemon.notify('WATCHDOG=1')
				ts_wd = None

		delay = ts_delay - ts
		if delay > 0: time.sleep(delay)


if __name__ == '__main__': sys.exit(main())
